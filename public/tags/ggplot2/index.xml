
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot2 on R Blogs</title>
    <link>/tags/ggplot2/</link>
    <description>Recent content in ggplot2 on R Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Posts</title>
      <link>/posts/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/</guid>
      <description></description> 
    </item>
    
    <item>
      <title>Task 2 - Retail Strategy and Analytics</title>
      <link>/2020/09/task-1-retail-strategy-and-analytics/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/09/task-1-retail-strategy-and-analytics/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Hey Everyone! I’m back with anoher tutorial on the Task 2 of thsame virtual experience program.
I completed this Virtual Experience Program a month back and I have posted the solutions of Task 1. You should visit that too before continuing this tutorial.&lt;/p&gt;
&lt;p&gt;This post is specifically about &lt;strong&gt;Task 2 - Experimentation and uplift testing&lt;/strong&gt;
You can view this &lt;a href=&#34;https://in.insidesherpa.com/virtual-internships/prototype/NkaC7knWtjSbi6aYv/Data%20Analytics%20Virtual%20Experience%20Program&#34;&gt;Virtual Experience Program&lt;/a&gt; and enroll for the same.&lt;/p&gt;
&lt;p&gt;Through the entire Task 1, I learnt how simple and efficient their solution module is rather than my way of writing code. So, instead I learnt their efficient yet short and simple coding and applied it to Task 2.&lt;/p&gt;
&lt;p&gt;So, lets dive straight to the solution.&lt;/p&gt;
&lt;div id=&#34;load-required-libraries-and-datasets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load required libraries and datasets&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(list = ls())
library(data.table)
library(tibble)
library(ggplot2)
library(tidyr)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;load-the-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load the dataset&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- fread(&amp;quot;QVI_data2.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;set-themes-for-plots&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Set themes for plots&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;select-control-stores&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Select Control Stores&lt;/h2&gt;
&lt;p&gt;The client has selected store numbers 77, 86 and 88 as trial stores and want control stores to be established stores that are operational for the entire observation period.
We would want to match trial stores to control stores that are similar to the trial store prior to the trial period of Feb 2019 in terms of :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monthly overall sales revenue&lt;/li&gt;
&lt;li&gt;Monthly number of customers&lt;/li&gt;
&lt;li&gt;Monthly number of transactions per customer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s first create the metrics of interest and filter to stores that are present throughout the pre-trial period.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Calculate these measures over time for each store
#### Add a new month ID column in the data with the format yyyymm.
library(lubridate)
library(tidyverse)
library(dplyr)

monthYear &amp;lt;- format(as.Date(data$DATE),&amp;quot;%Y%m&amp;quot;)
data[, YEARMONTH := monthYear]

data$YEARMONTH &amp;lt;- as.numeric(as.character(data$YEARMONTH))

#### Next, we define the measure calculations to use during the analysis.  
####For each store and month calculate total sales, number of customers,transactions per customer, chips per customer and the average price per unit.

measureOverTime &amp;lt;- data %&amp;gt;% group_by(STORE_NBR,YEARMONTH) %&amp;gt;% summarise(totSales = sum(TOT_SALES),nCustomers = uniqueN(LYLTY_CARD_NBR),nTxnPerCust = uniqueN(TXN_ID)/uniqueN(LYLTY_CARD_NBR), nChipsPerTxn = sum(PROD_QTY)/uniqueN(TXN_ID), avgPricePerUnit = (sum(TOT_SALES)/sum(PROD_QTY)))


#### Filter to the pre-trial period and stores with full observation periods
storesWithFullObs &amp;lt;- as.data.table(table(measureOverTime$STORE_NBR))
storesWithFullObs &amp;lt;- storesWithFullObs %&amp;gt;% filter(N==12)
storesWithFullObs&amp;lt;-setNames(storesWithFullObs,c(&amp;quot;STORE_NBR&amp;quot;,&amp;quot;N&amp;quot;))


preTrialMeasures &amp;lt;- measureOverTime %&amp;gt;% filter(YEARMONTH &amp;lt; 201902,STORE_NBR %in% storesWithFullObs$STORE_NBR)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to work out a way of ranking how similar each potential control store is to the trial store. We ca calculate how correlated the performance of each store is to the trial store.&lt;/p&gt;
&lt;p&gt;Let’s write a function for this so that we don’t have to calculate this for each trial store and control store pair.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Create a function to calculate correlation for a measure, looping through each control store.

#For Sales
trialStore_sales &amp;lt;- preTrialMeasures %&amp;gt;% filter(STORE_NBR ==77)
trialStore_sales &amp;lt;- trialStore_sales %&amp;gt;% select(STORE_NBR,YEARMONTH,totSales,nCustomers)

calCorr &amp;lt;- function(preTrialMeasures,trialStore_sales,trialStoreN){
  
  calTable = data.table(Store1 = numeric(), Store2 = numeric(), corr_measure = numeric())
  
  stN &amp;lt;- preTrialMeasures %&amp;gt;% select(STORE_NBR)
  
  for(i in stN$STORE_NBR){
    
    contSt &amp;lt;- preTrialMeasures %&amp;gt;% filter(STORE_NBR==i)
    contSt &amp;lt;- contSt %&amp;gt;% select(totSales)
    
    calMeasure = data.table(&amp;quot;Store1&amp;quot; = trialStoreN, &amp;quot;Store2&amp;quot; = i, &amp;quot;corr_measure&amp;quot; = cor(trialStore_sales$totSales,contSt$totSales))
    
    calTable &amp;lt;- rbind(calTable, calMeasure) }
  return(calTable)

}

##For Customers
calculateCorrelation &amp;lt;- function(preTrialMeasures,trialStore_sales,trialStoreN){
  
  calTable = data.table(Store1 = numeric(), Store2 = numeric(), corr_measure = numeric())
  
  stN &amp;lt;- preTrialMeasures %&amp;gt;% select(STORE_NBR)
  
  for(i in stN$STORE_NBR){
    
    contSt &amp;lt;- preTrialMeasures %&amp;gt;% filter(STORE_NBR==i)
    contSt &amp;lt;- contSt %&amp;gt;% select(nCustomers)
    
    calMeasure = data.table(&amp;quot;Store1&amp;quot; = trialStoreN, &amp;quot;Store2&amp;quot; = i, &amp;quot;corr_measure&amp;quot; = cor(trialStore_sales$nCustomers,contSt$nCustomers))
    
    calTable &amp;lt;- rbind(calTable, calMeasure) }
  return(calTable)

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apart from correlation, we can also calculate a standardised metric based on the absolute difference between the trial store’s performance and each control store’s performance.&lt;/p&gt;
&lt;p&gt;Let’s write a function for this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Create a function to calculate a standardised magnitude distance for a measure, looping through each control store
##Sales
calculateMagnitudeDistance1 &amp;lt;- function(preTrialMeasures,trialStore_sales,trial_storeN){
  calTable = data.table(Store1 = numeric(), Store2 = numeric(), YEARMONTH = numeric(),mag_measure = numeric())

  stN &amp;lt;- preTrialMeasures %&amp;gt;% select(STORE_NBR)

  for(i in stN$STORE_NBR){

    contSt &amp;lt;- preTrialMeasures %&amp;gt;% filter(STORE_NBR==i)
    contSt &amp;lt;- contSt %&amp;gt;% select(totSales)

    calMeasure = data.table(&amp;quot;Store1&amp;quot; = trial_storeN, &amp;quot;Store2&amp;quot; = i, &amp;quot;YEARMONTH&amp;quot; = preTrialMeasures$YEARMONTH ,&amp;quot;mag_measure&amp;quot; = abs(trialStore_sales$totSales - contSt$totSales))
    
    calTable &amp;lt;- rbind(calTable,calMeasure) 
    calTable &amp;lt;- unique(calTable)
  }
   return(calTable)
}

###Standardize
standMag1 &amp;lt;- function(magnitude_nSales) {
  minMaxDist &amp;lt;- magnitude_nSales[, .(minDist = min( magnitude_nSales$mag_measure), maxDist = max(magnitude_nSales$mag_measure)), by = c(&amp;quot;Store1&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)]
  distTable &amp;lt;- merge(magnitude_nSales, minMaxDist, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;YEARMONTH&amp;quot;))
  distTable[, magnitudeMeasure := 1 - (mag_measure - minDist)/(maxDist - minDist)]
  finalDistTable &amp;lt;- distTable[, .(magN_measure = mean(magnitudeMeasure)), by = .(Store1, Store2)]
  return(finalDistTable)
}



##Customers
calculateMagnitudeDistance2 &amp;lt;- function(preTrialMeasures,trialStore_sales,trial_storeN){
  calTable = data.table(Store1 = numeric(), Store2 = numeric(), YEARMONTH = numeric(),mag_measure = numeric())

  stN &amp;lt;- preTrialMeasures %&amp;gt;% select(STORE_NBR)

  for(i in stN$STORE_NBR){

    contSt &amp;lt;- preTrialMeasures %&amp;gt;% filter(STORE_NBR==i)
    contSt &amp;lt;- contSt %&amp;gt;% select(nCustomers)

    calMeasure = data.table(&amp;quot;Store1&amp;quot; = trial_storeN, &amp;quot;Store2&amp;quot; = i, &amp;quot;YEARMONTH&amp;quot; = preTrialMeasures$YEARMONTH ,&amp;quot;mag_measure&amp;quot; = abs(trialStore_sales$nCustomers - contSt$nCustomers))
    
    calTable &amp;lt;- rbind(calTable,calMeasure) 
    calTable &amp;lt;- unique(calTable)
  }
   return(calTable)
}

###Standardize
standMag2 &amp;lt;- function(magnitude_nCustomers) {
  minMaxDist &amp;lt;- magnitude_nCustomers[, .(minDist = min( magnitude_nCustomers$mag_measure), maxDist = max(magnitude_nCustomers$mag_measure)), by = c(&amp;quot;Store1&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)]
  distTable &amp;lt;- merge(magnitude_nCustomers, minMaxDist, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;YEARMONTH&amp;quot;))
  distTable[, magnitudeMeasure := 1 - (mag_measure - minDist)/(maxDist - minDist)]
  finalDistTable &amp;lt;- distTable[, .(magN_measure = mean(magnitudeMeasure)), by = .(Store1, Store2)]
  return(finalDistTable)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s use the functions to find the control stores! We’ll select control stores based on how similar monthly total sales in dollar amounts and monthly number of customers are to the trial stores.
So we will need to use our functions to get four scores, two for each of total sales and total customers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Use the function you created to calculate correlations against store 77 using total sales and number of customers.
trial_store &amp;lt;- 77
corr_nSales &amp;lt;- calCorr(preTrialMeasures,trialStore_sales,trial_store)
corr_nSales &amp;lt;- unique(corr_nSales)

corr_nCustomers &amp;lt;- calculateCorrelation(preTrialMeasures, trialStore_sales, trial_store )
corr_nCustomers &amp;lt;- unique(corr_nCustomers)

#### Use the functions for calculating magnitude
magnitude_nSales &amp;lt;- calculateMagnitudeDistance1(preTrialMeasures, trialStore_sales, trial_store)
magnitude_nSales &amp;lt;- standMag1(magnitude_nSales)
magnitude_nCustomers &amp;lt;‐ calculateMagnitudeDistance2(preTrialMeasures,trialStore_sales, trial_store)
magnitude_nCustomers &amp;lt;- standMag2(magnitude_nCustomers)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll need to combine the all the scores calculated using our function to create a composite score to rank on.&lt;/p&gt;
&lt;p&gt;Let’s take a simple average of the correlation and magnitude scores for each driver. Note that if we consider it more important for the trend of the drivers to be similar, we can increase the weight of the correlation score (a simple average gives a weight of 0.5 to the corr_weight) or if we consider the absolute size of the drivers to be more important, we can lower the weight of the correlation score.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;corr_weight &amp;lt;- 0.5

score_nSales &amp;lt;- merge(corr_nSales,magnitude_nSales, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;Store2&amp;quot;))
score_nSales &amp;lt;- score_nSales %&amp;gt;% mutate(scoreNSales = (score_nSales$corr_measure * corr_weight)+(score_nSales$magN_measure * (1 - corr_weight)))

score_nCustomers &amp;lt;- merge(corr_nCustomers,magnitude_nCustomers, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;Store2&amp;quot;))
score_nCustomers &amp;lt;- score_nCustomers %&amp;gt;% mutate(scoreNCust = (score_nCustomers$corr_measure * corr_weight)+(score_nCustomers$magN_measure * (1 - corr_weight)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a score for each of total number of sales and number of customers. Let’s combine the two via a simple average.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;score_Control &amp;lt;- merge(score_nSales,score_nCustomers, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;Store2&amp;quot;))
score_Control &amp;lt;- score_Control %&amp;gt;% mutate(finalControlScore = (scoreNSales * 0.5) + (scoreNCust * 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The store with the highest score is then selected as the control store since it is most similar to the trial store.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Select control stores based on the highest matching store (closest to 1 but not the store itself, i.e. the second ranked highest store)
control_store &amp;lt;- score_Control[order(-finalControlScore),]
control_store &amp;lt;- control_store$Store2
control_store &amp;lt;- control_store[2]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have found a control store, let’s check visually if the drivers are indeed similar in the period before the trial.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Visual checks on trends based on the drivers

measureOverTimeSales &amp;lt;- as.data.table(measureOverTime)
pastSales &amp;lt;- measureOverTimeSales[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;,ifelse(STORE_NBR == control_store,&amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, totSales := mean(totSales), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/%100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][YEARMONTH &amp;lt; 201903 , ]

##Visualize
ggplot(pastSales, aes(TransactionMonth, totSales, color = Store_type)) + geom_line() + labs(x = &amp;quot;Month of Operation&amp;quot;, y = &amp;quot;Total Sales&amp;quot;, title = &amp;quot;Total Sales by Month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;next-number-of-customers&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Next, number of Customers&lt;/h5&gt;
&lt;p&gt;Conduct visual checks on customer count trends by comparing the
trial store to the control store and other stores.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;measureOverTimeCusts &amp;lt;- as.data.table(measureOverTime)
pastCustomers &amp;lt;- measureOverTimeCusts[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;,ifelse(STORE_NBR == control_store,&amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, numberCustomers := mean(nCustomers), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/%100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][YEARMONTH &amp;lt; 201903 ]

###Visualize
ggplot(pastCustomers, aes(TransactionMonth, numberCustomers, color = Store_type)) + geom_line() + labs(x = &amp;quot;Month of Operation&amp;quot;, y = &amp;quot;Total Number of Customers&amp;quot;, title = &amp;quot;Total Number of Customers by Month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;assessment-of-trial&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Assessment of Trial&lt;/h2&gt;
&lt;p&gt;The trial period goes from the start of February 2019 to April 2019. We now want to see if there has been an uplift in overall chip sales.&lt;/p&gt;
&lt;p&gt;We’ll start with scaling the control store’s sales to a level similar to control for any differences between the two stores outside of the trial period.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;preTrialMeasures &amp;lt;- as.data.table(preTrialMeasures)
scalingFactorForControlSales &amp;lt;- preTrialMeasures[STORE_NBR == trial_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(totSales)]/preTrialMeasures[STORE_NBR == control_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(totSales)]

##Applying the Scaling Factor
measureOverTimeSales &amp;lt;- as.data.table(measureOverTime)
scaledControlSales &amp;lt;- measureOverTimeSales[STORE_NBR == control_store, ][ , controlSales := totSales * scalingFactorForControlSales ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have comparable sales figures for the control store, we can calculate the percentage difference between the scaled control sales and the trial store’s sales during the trial period.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; measureOverTime &amp;lt;- as.data.table(measureOverTime)
percentageDiff &amp;lt;- merge(scaledControlSales[, c(&amp;quot;YEARMONTH&amp;quot;, &amp;quot;controlSales&amp;quot;)], measureOverTime[STORE_NBR == trial_store, c(&amp;quot;totSales&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)], by = &amp;quot;YEARMONTH&amp;quot;)[ , percentageDiff := abs(controlSales - totSales)/controlSales]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see if the difference is significant!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### As our null hypothesis is that the trial period is the same as the pre-trial period, let&amp;#39;s take the standard deviation based on the scaled percentage difference in the pre-trial period 

stdDev &amp;lt;- sd(percentageDiff[YEARMONTH &amp;lt; 201902, percentageDiff])

#### Note that there are 8 months in the pre-trial period
#### hence 8 - 1 = 7 degrees of freedom
degreesOfFreedom &amp;lt;- 7 

#### We will test with a null hypothesis of there being 0 difference between trial and control stores.
#### Calculate the t-values for the trial months. 
percentageDiff[ , tvalue := (percentageDiff - 0)/stdDev][ , TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;-&amp;quot;),&amp;quot;%Y-%m-%d&amp;quot;)][YEARMONTH &amp;lt; 201905 &amp;amp; YEARMONTH &amp;gt; 201901, .(TransactionMonth, tvalue)]

#### Also,find the 95th percentile of the t distribution with the appropriate degrees of freedom to check whether the hypothesis is statistically significant.

qt(0.95, df = degreesOfFreedom)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can observe that the t-value is much larger than the 95th percentile value of the t-distribution for March and April i.e. the increase in sales in the trial store in March and April is statistically greater than in the control store.&lt;/p&gt;
&lt;p&gt;Let’s create a more visual version of this by plotting the sales of the control store, the sales of the trial stores and the 95th percentile value of sales of the control store.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#measureOverTimeSales &amp;lt;- as.data.table(measureOverTime)

pastSales &amp;lt;- measureOverTimeSales[, Store_type := ifelse(STORE_NBR ==trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store,&amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, totSales := mean(totSales), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][Store_type %in% c(&amp;quot;Trial&amp;quot;, &amp;quot;Control&amp;quot;), ]
 
#pastSales &amp;lt;- as.data.table(pastSales)

### Control Store 95th percentile
pastSales_Controls95 &amp;lt;- pastSales[ Store_type == &amp;quot;Control&amp;quot; , ][, totSales := totSales * (1 + stdDev * 2)][, Store_type := &amp;quot;Control 95th % confidence&amp;quot;]

### Control Store 5th percentile
pastSales_Controls5 &amp;lt;- pastSales[Store_type == &amp;quot;Control&amp;quot; , ][, totSales := totSales * (1 - stdDev * 2)][, Store_type := &amp;quot;Control 5th % confidence&amp;quot;]

trialAssessment &amp;lt;- rbind(pastSales, pastSales_Controls95, pastSales_Controls5)


### Visualize
ggplot(trialAssessment, aes(TransactionMonth, totSales, color = Store_type)) + geom_rect(data = trialAssessment[ YEARMONTH &amp;lt; 201905 &amp;amp; YEARMONTH &amp;gt; 201901 ,], aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth), ymin = 0 , ymax = Inf, color = NULL), show.legend = FALSE) + geom_line() + labs(x = &amp;quot;Month of operation&amp;quot;, y = &amp;quot;Total sales&amp;quot;, title = &amp;quot;Total sales by month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The results show that the trial in store 77 is significantly different to its control store in the trial period as the trial store performance lies outside th 5% to 95% confidence interval of the control store in two of the three trial
months.&lt;/p&gt;
&lt;p&gt;Let’s have a look at assessing this for number of customers as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;preTrialMeasures &amp;lt;- as.data.table(preTrialMeasures)

scalingFactorForControlCusts &amp;lt;- preTrialMeasures[STORE_NBR == trial_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(nCustomers)]/preTrialMeasures[STORE_NBR == control_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(nCustomers)]

measureOverTimeCusts &amp;lt;- as.data.table(measureOverTime)

scaledControlCustomers &amp;lt;- measureOverTimeCusts[STORE_NBR == control_store, ][, controlCustomers := nCustomers * scalingFactorForControlCusts][,Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;trial&amp;quot;, ifelse(STORE_NBR == control_store,&amp;quot;control&amp;quot;,&amp;quot;Other Store&amp;quot;))]

###Calculate the % difference between scaled control sales and trial sales
percentageDiff &amp;lt;- merge(scaledControlCustomers[, c(&amp;quot;YEARMONTH&amp;quot;, &amp;quot;controlCustomers&amp;quot;)], measureOverTimeCusts[STORE_NBR == trial_store, c(&amp;quot;nCustomers&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)], by = &amp;quot;YEARMONTH&amp;quot;)[ , percentageDiff := abs(controlCustomers - nCustomers)/controlCustomers]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s again see if the difference is significant visually!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### As our null hypothesis is that the trial period is the same as the pre-trial period, let&amp;#39;s take the standard deviation based on the scaled percentage difference in the pre-trial period 
stdDev &amp;lt;- sd(percentageDiff[YEARMONTH &amp;lt; 201902 , percentageDiff]) 

degreesOfFreedom &amp;lt;- 7

#### Trial and control store number of customers
measureOverTimeCusts &amp;lt;- as.data.table(measureOverTime)
pastCustomers &amp;lt;- measureOverTimeCusts[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store, &amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, nCusts := mean(nCustomers), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)
][Store_type %in% c(&amp;quot;Trial&amp;quot;, &amp;quot;Control&amp;quot;), ]

###Control 95th percentile
pastCustomers_Control95 &amp;lt;- pastCustomers[Store_type == &amp;quot;Control&amp;quot;,][, nCusts := nCusts * (1 + stdDev * 2)][, Store_type := &amp;quot;Control 95th % confidence interval&amp;quot;]

###Control 5th percentile
pastCustomers_Control5 &amp;lt;- pastCustomers[Store_type == &amp;quot;Control&amp;quot;,][, nCusts := nCusts * (1 + stdDev * 2)][, Store_type := &amp;quot;Control 5th % confidence interval&amp;quot;]

trialAssessment &amp;lt;- rbind(pastCustomers,pastCustomers_Control95,pastCustomers_Control5)

###Visualize
ggplot(trialAssessment, aes(TransactionMonth, nCusts, color = Store_type)) + geom_rect(data = trialAssessment[YEARMONTH &amp;lt; 201905 &amp;amp; YEARMONTH &amp;gt; 201901 , ], aes(xmin = min(TransactionMonth), xmax =  max(TransactionMonth), ymin = 0, ymax = Inf, coor = NULL), show.legend = F) + geom_line(aes(linetype = Store_type)) + labs(x = &amp;quot;Month Of Operation&amp;quot;, y = &amp;quot;Total Number of Customers&amp;quot;, title = &amp;quot;Total Number of Customers by Month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It looks like the number of customers is significantly higher in all of the three months. This seems to suggest that the trial had a significant impact on increasing the number of customers in trial store 86 but as we saw, sales were not significantly higher. We should check with the Category Manager if there were special deals in the trial store that were may have resulted in lower prices, impacting the results.&lt;/p&gt;
&lt;p&gt;Let’s repeat finding the control store and assessing the impact of the trial for each of the other two trial stores.&lt;/p&gt;
&lt;div id=&#34;trial-store-86&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Trial Store 86&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- as.data.table(data)
measureOverTime &amp;lt;- data[, .(totSales = sum(TOT_SALES), nCustomers = uniqueN(LYLTY_CARD_NBR), nTxnPerCust = uniqueN(TXN_ID)/uniqueN(LYLTY_CARD_NBR), nChipsPerTxn = sum(PROD_QTY)/uniqueN(TXN_ID), avgPricePerUnit = sum(TOT_SALES)/sum(PROD_QTY)), by = c(&amp;quot;STORE_NBR&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)][order(STORE_NBR,YEARMONTH)]

### USe the fucntions for calculating correlation
trial_store &amp;lt;- 86

trialStore_sales &amp;lt;- preTrialMeasures %&amp;gt;% filter(STORE_NBR ==86)
trialStore_sales &amp;lt;- trialStore_sales %&amp;gt;% select(STORE_NBR,YEARMONTH,totSales,nCustomers)

corr_nSales &amp;lt;- calCorr(preTrialMeasures,trialStore_sales,trial_store)
corr_nSales &amp;lt;- unique(corr_nSales)

corr_nCustomers &amp;lt;- calculateCorrelation(preTrialMeasures, trialStore_sales, trial_store )
corr_nCustomers &amp;lt;- unique(corr_nCustomers)

#### Use the functions for calculating magnitude
magnitude_nSales &amp;lt;- calculateMagnitudeDistance1(preTrialMeasures, trialStore_sales, trial_store)
magnitude_nSales &amp;lt;- standMag1(magnitude_nSales)
magnitude_nCustomers &amp;lt;‐ calculateMagnitudeDistance2(preTrialMeasures,trialStore_sales, trial_store)
magnitude_nCustomers &amp;lt;- standMag2(magnitude_nCustomers)

#### Now, create a combined score composed of correlation and magnitude

corr_weight &amp;lt;- 0.5

score_nSales &amp;lt;- merge(corr_nSales,magnitude_nSales, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;Store2&amp;quot;))
score_nSales &amp;lt;- score_nSales %&amp;gt;% mutate(scoreNSales = (score_nSales$corr_measure * corr_weight)+(score_nSales$magN_measure * (1 - corr_weight)))

score_nCustomers &amp;lt;- merge(corr_nCustomers,magnitude_nCustomers, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;Store2&amp;quot;))
score_nCustomers &amp;lt;- score_nCustomers %&amp;gt;% mutate(scoreNCust = (score_nCustomers$corr_measure * corr_weight)+(score_nCustomers$magN_measure * (1 - corr_weight)))


#### Finally, combine scores across the drivers using a simple average.

score_Control &amp;lt;- merge(score_nSales,score_nCustomers, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;Store2&amp;quot;))
score_Control &amp;lt;- score_Control %&amp;gt;% mutate(finalControlScore = (scoreNSales * 0.5) + (scoreNCust * 0.5))


#### Select control stores based on the highest matching store
#### (closest to 1 but not the store itself, i.e. the second ranked highest store)

control_store &amp;lt;- score_Control[order(-finalControlScore),]
control_store &amp;lt;- control_store$Store2
control_store &amp;lt;- control_store[2]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like store 155 will be a control store for trial store 86.&lt;/p&gt;
&lt;p&gt;Again, let’s check visually if the drivers are indeed similar in the period before
the trial.&lt;/p&gt;
&lt;p&gt;We’ll look at total sales first.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;measureOverTimeSales &amp;lt;- as.data.table(measureOverTime)
pastSales &amp;lt;- measureOverTimeSales[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store, &amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, totSales := mean(totSales), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][YEARMONTH &amp;lt; 201903 , ]

###Visualize
ggplot(pastSales, aes(TransactionMonth, totSales, color = Store_type)) +
geom_line(aes(linetype = Store_type)) +
labs(x = &amp;quot;Month of operation&amp;quot;, y = &amp;quot;Total sales&amp;quot;, title = &amp;quot;Total sales by month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Great, sales are trending in a similar way.&lt;/p&gt;
&lt;p&gt;Next, number of customers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;measureOverTimeCusts &amp;lt;- as.data.table(measureOverTime)

pastCustomers &amp;lt;- measureOverTimeCusts[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store, &amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, nCusts := mean(nCustomers), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][YEARMONTH &amp;lt; 201903 ,] 

###Visualize
ggplot(pastCustomers, aes(TransactionMonth, nCusts, color = Store_type)) +
geom_line() + labs(x = &amp;quot;Month of operation&amp;quot;, y = &amp;quot;Total number of customers&amp;quot;, title = &amp;quot;Total number of customers by month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Good, the trend in number of customers is also similar.&lt;/p&gt;
&lt;p&gt;Let’s now assess the impact of the trial on sales.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Scale pre-trial control sales to match pre-trial trial store sales 
scalingFactorForControlSales &amp;lt;- preTrialMeasures[STORE_NBR == trial_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(totSales)]/preTrialMeasures[STORE_NBR == control_store &amp;amp;
YEARMONTH &amp;lt; 201902, sum(totSales)]

#### Apply the scaling factor
measureOverTimeSales &amp;lt;- as.data.table(measureOverTime)
scaledControlSales &amp;lt;- measureOverTimeSales[STORE_NBR == control_store, ][ , controlSales := totSales * scalingFactorForControlSales]

###Calculate the percentage difference between scaled control sales and trial sales
 
measureOverTime &amp;lt;- as.data.table(measureOverTime)

percentageDiff &amp;lt;-  merge(scaledControlSales[, c(&amp;quot;YEARMONTH&amp;quot;, &amp;quot;controlSales&amp;quot;)], measureOverTime[STORE_NBR == trial_store, c(&amp;quot;totSales&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)], by = &amp;quot;YEARMONTH&amp;quot;)[ , percentageDiff := abs(controlSales - totSales)/controlSales]


#### As our null hypothesis is that the trial period is the same as the pre-trial period, let&amp;#39;s take the standard deviation based on the scaled percentage difference in the pre-trial period 

stdDev &amp;lt;- sd(percentageDiff[YEARMONTH &amp;lt; 201902, percentageDiff])

degreesOfFreedom &amp;lt;- 7

#### Trial and control store total sales
measureOverTimeSales &amp;lt;‐ as.data.table(measureOverTime)
pastSales &amp;lt;‐ measureOverTimeSales[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;,
ifelse(STORE_NBR == control_store,&amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;)) ][, totSales := mean(totSales), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][Store_type %in% c(&amp;quot;Trial&amp;quot;, &amp;quot;Control&amp;quot;), ]

#### Control store 95th percentile
pastSales_Controls95 &amp;lt;‐ pastSales[Store_type == &amp;quot;Control&amp;quot;,][, totSales := totSales * (1 + stdDev * 2)][, Store_type := &amp;quot;Control 95th % confidence interval&amp;quot;]

#### Control store 5th percentile
pastSales_Controls5 &amp;lt;‐ pastSales[Store_type == &amp;quot;Control&amp;quot;,][, totSales := totSales * (1 ‐ stdDev * 2)][, Store_type := &amp;quot;Control 5th % confidence interval&amp;quot;]

trialAssessment &amp;lt;‐ rbind(pastSales, pastSales_Controls95, pastSales_Controls5)

#### Plotting these in one nice graph
ggplot(trialAssessment, aes(TransactionMonth, totSales, color = Store_type)) + geom_rect(data = trialAssessment[ YEARMONTH &amp;lt; 201905 &amp;amp; YEARMONTH &amp;gt; 201901 ,], aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth), ymin = 0 ,
ymax = Inf, color = NULL), show.legend = FALSE) + geom_line(aes(linetype = Store_type)) + labs(x = &amp;quot;Month of operation&amp;quot;, y = &amp;quot;Total sales&amp;quot;, title = &amp;quot;Total sales by month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The results show that the trial in store 86 is significantly different to its control store in the trial period as the trial store performance lies outside of the 5% to 95% confidence interval of the control store in two of the three trial
months.&lt;/p&gt;
&lt;p&gt;Let’s have a look at assessing this for number of customers as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scalingFactorForControlCust &amp;lt;‐ preTrialMeasures[STORE_NBR == trial_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(nCustomers)]/preTrialMeasures[STORE_NBR == control_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(nCustomers)]

#### Apply the scaling factor
measureOverTimeCusts &amp;lt;‐ as.data.table(measureOverTime)

scaledControlCustomers &amp;lt;‐ measureOverTimeCusts[STORE_NBR == control_store,][ , controlCustomers := nCustomers * scalingFactorForControlCust][, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store, &amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))]

#### Calculate the percentage difference between scaled control sales and trial sales
percentageDiff &amp;lt;‐ merge(scaledControlCustomers[, c(&amp;quot;YEARMONTH&amp;quot;,
&amp;quot;controlCustomers&amp;quot;)], measureOverTime[STORE_NBR == trial_store, c(&amp;quot;nCustomers&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)], by = &amp;quot;YEARMONTH&amp;quot;)[, percentageDiff :=abs(controlCustomers‐nCustomers)/controlCustomers]


#### As our null hypothesis is that the trial period is the same as the pre‐trial period, let&amp;#39;s take the standard deviation based on the scaled percentage difference in the pre‐trial period

stdDev &amp;lt;‐ sd(percentageDiff[YEARMONTH &amp;lt; 201902 , percentageDiff])

degreesOfFreedom &amp;lt;‐ 7 # note that there are 8 months in the pre‐trial period hence 8 ‐ 1 = 7 degrees of freedom

#### Trial and control store number of customers

measureOverTimeCusts &amp;lt;- as.data.table(measureOverTime)

pastCustomers &amp;lt;- measureOverTimeCusts[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store, &amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, nCusts := mean(nCustomers), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][Store_type %in% c(&amp;quot;Trial&amp;quot;, &amp;quot;Control&amp;quot;), ]

#### Control store 95th percentile
pastCustomers_Controls95 &amp;lt;‐ pastCustomers[Store_type == &amp;quot;Control&amp;quot;,][, nCusts := nCusts * (1 + stdDev * 2) ][, Store_type := &amp;quot;Control 95th % confidence interval&amp;quot;]

#### Control store 5th percentile
pastCustomers_Controls5 &amp;lt;‐ pastCustomers[Store_type == &amp;quot;Control&amp;quot;,][, nCusts := nCusts * (1 ‐ stdDev * 2)][, Store_type := &amp;quot;Control 5th % confidence interval&amp;quot;]

trialAssessment &amp;lt;‐ rbind(pastCustomers, pastCustomers_Controls95, pastCustomers_Controls5)

#### Visualize
ggplot(trialAssessment, aes(TransactionMonth, nCusts, color = Store_type)) + geom_rect(data = trialAssessment[ YEARMONTH &amp;lt; 201905 &amp;amp; YEARMONTH &amp;gt; 201901 ,], aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth), ymin = 0 ,
ymax = Inf, color = NULL), show.legend = FALSE) + geom_line() +
labs(x = &amp;quot;Month of operation&amp;quot;, y = &amp;quot;Total number of customers&amp;quot;, title = &amp;quot;Total number of customers by month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;trial-store-88&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Trial Store 88&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- as.data.table(data)
measureOverTime &amp;lt;- data[, .(totSales = sum(TOT_SALES), nCustomers = uniqueN(LYLTY_CARD_NBR), nTxnPerCust = uniqueN(TXN_ID)/uniqueN(LYLTY_CARD_NBR), nChipsPerTxn = sum(PROD_QTY)/uniqueN(TXN_ID), avgPricePerUnit = sum(TOT_SALES)/sum(PROD_QTY)), by = c(&amp;quot;STORE_NBR&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)][order(STORE_NBR,YEARMONTH)]

### USe the fucntions for calculating correlation
trial_store &amp;lt;- 88

trialStore_sales &amp;lt;- preTrialMeasures %&amp;gt;% filter(STORE_NBR ==88)
trialStore_sales &amp;lt;- trialStore_sales %&amp;gt;% select(STORE_NBR,YEARMONTH,totSales,nCustomers)

corr_nSales &amp;lt;- calCorr(preTrialMeasures,trialStore_sales,trial_store)
corr_nSales &amp;lt;- unique(corr_nSales)

corr_nCustomers &amp;lt;- calculateCorrelation(preTrialMeasures, trialStore_sales, trial_store )
corr_nCustomers &amp;lt;- unique(corr_nCustomers)

#### Use the functions for calculating magnitude
magnitude_nSales &amp;lt;- calculateMagnitudeDistance1(preTrialMeasures, trialStore_sales, trial_store)
magnitude_nSales &amp;lt;- standMag1(magnitude_nSales)
magnitude_nCustomers &amp;lt;‐ calculateMagnitudeDistance2(preTrialMeasures,trialStore_sales, trial_store)
magnitude_nCustomers &amp;lt;- standMag2(magnitude_nCustomers)

#### Now, create a combined score composed of correlation and magnitude

corr_weight &amp;lt;- 0.5

score_nSales &amp;lt;- merge(corr_nSales,magnitude_nSales, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;Store2&amp;quot;))
score_nSales &amp;lt;- score_nSales %&amp;gt;% mutate(scoreNSales = (score_nSales$corr_measure * corr_weight)+(score_nSales$magN_measure * (1 -corr_weight)))

score_nCustomers &amp;lt;- merge(corr_nCustomers,magnitude_nCustomers, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;Store2&amp;quot;))
score_nCustomers &amp;lt;- score_nCustomers %&amp;gt;% mutate(scoreNCust = (score_nCustomers$corr_measure * corr_weight)+(score_nCustomers$magN_measure * (1 - corr_weight)))


#### Finally, combine scores across the drivers using a simple average.

score_Control &amp;lt;- merge(score_nSales,score_nCustomers, by = c(&amp;quot;Store1&amp;quot;, &amp;quot;Store2&amp;quot;))
score_Control &amp;lt;- score_Control %&amp;gt;% mutate(finalControlScore = (scoreNSales * 0.5) + (scoreNCust * 0.5))


#### Select control stores based on the highest matching store
#### (closest to 1 but not the store itself, i.e. the second ranked highest store)

control_store &amp;lt;- score_Control[order(-finalControlScore),]
control_store &amp;lt;- control_store$Store2
control_store &amp;lt;- control_store[2]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like store 178 will be a control store for trial store 88.&lt;/p&gt;
&lt;p&gt;Again, let’s check visually if the drivers are indeed similar in the period before
the trial.&lt;/p&gt;
&lt;p&gt;We’ll look at total sales first.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;measureOverTimeSales &amp;lt;- as.data.table(measureOverTime)
pastSales &amp;lt;- measureOverTimeSales[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store, &amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, totSales := mean(totSales), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][YEARMONTH &amp;lt; 201903 , ]

###Visualize
ggplot(pastSales, aes(TransactionMonth, totSales, color = Store_type)) +
geom_line(aes(linetype = Store_type)) +
labs(x = &amp;quot;Month of operation&amp;quot;, y = &amp;quot;Total sales&amp;quot;, title = &amp;quot;Total sales by month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, number of customers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;measureOverTimeCusts &amp;lt;- as.data.table(measureOverTime)

pastCustomers &amp;lt;- measureOverTimeCusts[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store, &amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, nCusts := mean(nCustomers), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][YEARMONTH &amp;lt; 201903 ,] 

###Visualize
ggplot(pastCustomers, aes(TransactionMonth, nCusts, color = Store_type)) +
geom_line() + labs(x = &amp;quot;Month of operation&amp;quot;, y = &amp;quot;Total number of customers&amp;quot;, title = &amp;quot;Total number of customers by month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s now assess the impact of the trial on sales.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Scale pre-trial control sales to match pre-trial trial store sales 
scalingFactorForControlSales &amp;lt;- preTrialMeasures[STORE_NBR == trial_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(totSales)]/preTrialMeasures[STORE_NBR == control_store &amp;amp;
YEARMONTH &amp;lt; 201902, sum(totSales)]

#### Apply the scaling factor
measureOverTimeSales &amp;lt;- as.data.table(measureOverTime)
scaledControlSales &amp;lt;- measureOverTimeSales[STORE_NBR == control_store, ][ , controlSales := totSales * scalingFactorForControlSales]

###Calculate the percentage difference between scaled control sales and trial sales
 
measureOverTime &amp;lt;- as.data.table(measureOverTime)

percentageDiff &amp;lt;-  merge(scaledControlSales[, c(&amp;quot;YEARMONTH&amp;quot;, &amp;quot;controlSales&amp;quot;)], measureOverTime[STORE_NBR == trial_store, c(&amp;quot;totSales&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)], by = &amp;quot;YEARMONTH&amp;quot;)[ , percentageDiff := abs(controlSales - totSales)/controlSales]


#### As our null hypothesis is that the trial period is the same as the pre-trial period, let&amp;#39;s take the standard deviation based on the scaled percentage difference in the pre-trial period 

stdDev &amp;lt;- sd(percentageDiff[YEARMONTH &amp;lt; 201902, percentageDiff])

degreesOfFreedom &amp;lt;- 7

#### Trial and control store total sales
measureOverTimeSales &amp;lt;‐ as.data.table(measureOverTime)
pastSales &amp;lt;‐ measureOverTimeSales[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;,
ifelse(STORE_NBR == control_store,&amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;)) ][, totSales := mean(totSales), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][Store_type %in% c(&amp;quot;Trial&amp;quot;, &amp;quot;Control&amp;quot;), ]

#### Control store 95th percentile
pastSales_Controls95 &amp;lt;‐ pastSales[Store_type == &amp;quot;Control&amp;quot;,][, totSales := totSales * (1 + stdDev * 2)][, Store_type := &amp;quot;Control 95th % confidence interval&amp;quot;]

#### Control store 5th percentile
pastSales_Controls5 &amp;lt;‐ pastSales[Store_type == &amp;quot;Control&amp;quot;,][, totSales := totSales * (1 ‐ stdDev * 2)][, Store_type := &amp;quot;Control 5th % confidence interval&amp;quot;]

trialAssessment &amp;lt;‐ rbind(pastSales, pastSales_Controls95, pastSales_Controls5)

#### Plotting these in one nice graph
ggplot(trialAssessment, aes(TransactionMonth, totSales, color = Store_type)) + geom_rect(data = trialAssessment[ YEARMONTH &amp;lt; 201905 &amp;amp; YEARMONTH &amp;gt; 201901 ,], aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth), ymin = 0 ,
ymax = Inf, color = NULL), show.legend = FALSE) + geom_line(aes(linetype = Store_type)) + labs(x = &amp;quot;Month of operation&amp;quot;, y = &amp;quot;Total sales&amp;quot;, title = &amp;quot;Total sales by month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s have a look at assessing this for number of customers as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scalingFactorForControlCust &amp;lt;‐ preTrialMeasures[STORE_NBR == trial_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(nCustomers)]/preTrialMeasures[STORE_NBR == control_store &amp;amp; YEARMONTH &amp;lt; 201902, sum(nCustomers)]

#### Apply the scaling factor
measureOverTimeCusts &amp;lt;‐ as.data.table(measureOverTime)

scaledControlCustomers &amp;lt;‐ measureOverTimeCusts[STORE_NBR == control_store,][ , controlCustomers := nCustomers * scalingFactorForControlCust][, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store, &amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))]

#### Calculate the percentage difference between scaled control sales and trial sales
percentageDiff &amp;lt;‐ merge(scaledControlCustomers[, c(&amp;quot;YEARMONTH&amp;quot;,
&amp;quot;controlCustomers&amp;quot;)], measureOverTime[STORE_NBR == trial_store, c(&amp;quot;nCustomers&amp;quot;, &amp;quot;YEARMONTH&amp;quot;)], by = &amp;quot;YEARMONTH&amp;quot;)[, percentageDiff :=abs(controlCustomers‐nCustomers)/controlCustomers]


#### As our null hypothesis is that the trial period is the same as the pre‐trial period, let&amp;#39;s take the standard deviation based on the scaled percentage difference in the pre‐trial period

stdDev &amp;lt;‐ sd(percentageDiff[YEARMONTH &amp;lt; 201902 , percentageDiff])

degreesOfFreedom &amp;lt;‐ 7 # note that there are 8 months in the pre‐trial period hence 8 ‐ 1 = 7 degrees of freedom

#### Trial and control store number of customers

measureOverTimeCusts &amp;lt;- as.data.table(measureOverTime)

pastCustomers &amp;lt;- measureOverTimeCusts[, Store_type := ifelse(STORE_NBR == trial_store, &amp;quot;Trial&amp;quot;, ifelse(STORE_NBR == control_store, &amp;quot;Control&amp;quot;, &amp;quot;Other stores&amp;quot;))][, nCusts := mean(nCustomers), by = c(&amp;quot;YEARMONTH&amp;quot;,&amp;quot;Store_type&amp;quot;)][, TransactionMonth := as.Date(paste(YEARMONTH %/% 100, YEARMONTH %% 100, 1, sep = &amp;quot;‐&amp;quot;), &amp;quot;%Y‐%m‐%d&amp;quot;)][Store_type %in% c(&amp;quot;Trial&amp;quot;, &amp;quot;Control&amp;quot;), ]

#### Control store 95th percentile
pastCustomers_Controls95 &amp;lt;‐ pastCustomers[Store_type == &amp;quot;Control&amp;quot;,][, nCusts := nCusts * (1 + stdDev * 2) ][, Store_type := &amp;quot;Control 95th % confidence interval&amp;quot;]

#### Control store 5th percentile
pastCustomers_Controls5 &amp;lt;‐ pastCustomers[Store_type == &amp;quot;Control&amp;quot;,][, nCusts := nCusts * (1 ‐ stdDev * 2)][, Store_type := &amp;quot;Control 5th % confidence interval&amp;quot;]

trialAssessment &amp;lt;‐ rbind(pastCustomers, pastCustomers_Controls95, pastCustomers_Controls5)

#### Visualize
ggplot(trialAssessment, aes(TransactionMonth, nCusts, color = Store_type)) + geom_rect(data = trialAssessment[ YEARMONTH &amp;lt; 201905 &amp;amp; YEARMONTH &amp;gt; 201901 ,], aes(xmin = min(TransactionMonth), xmax = max(TransactionMonth), ymin = 0 ,
ymax = Inf, color = NULL), show.legend = FALSE) + geom_line() +
labs(x = &amp;quot;Month of operation&amp;quot;, y = &amp;quot;Total number of customers&amp;quot;, title = &amp;quot;Total number of customers by month&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-09-06-task-2-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-28-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total number of customers in the trial period for the trial store is significantly higher than the control store for two out of three months, which indicates a positive trial effect.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Good work! We’ve found control stores 233, 155, 178 for trial stores 77, 86 and 88 respectively. The results for trial stores 77 and 86 during the trial period show a significant difference in at least two of the three trial months but this is not the case for trial store 88. We can check with the client if the implementation of the trial was
different in trial store 88 but overall, the trial shows a significant increase in sales. Now that we have finished our analysis, we can prepare our presentation to the Category Manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;outro&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Outro&lt;/h1&gt;
&lt;p&gt;Task 2 was crucial step in analysis so as to identify benchmark stores that would test the impact of the trial store layouts on customer sales. Collation and summarization of all the findings for each store so as to provide a recommendation that we can share outlining the impact on sales during the trial period.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Task 3 is about creating a presentation of all the findings we have gathered through our analysis in Task 1 and 2. I used &lt;em&gt;Google Slides&lt;/em&gt; to create my own. You can use the same or any other mode or even the module provided.&lt;/strong&gt;
&lt;strong&gt;Task 3 is quite easy but still on demand I can upload the steps to create a presentation for Task 3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Get in touch using any of my social media handles or mail me you queries!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Till then, any feedbacks, queries or recommendations are appreciated on any of my &lt;strong&gt;social media handles&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Refer to my &lt;a href=&#34;https://github.com/shrish83/VirtualInternships_InsideSherpa/blob/master/VP1_QuantiumDataAnalytics/task1.Rmd&#34;&gt;Github Profile&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stay tuned for more tutorials!&lt;br/&gt;
Thank You!&lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Task 1 - Retail Strategy and Analytics</title>
      <link>/2020/08/task-1-retail-strategy-and-analytics/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/08/task-1-retail-strategy-and-analytics/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Hello Everyone! It’s been long since I posted something new.
I completed this Virtual Experience Program a month back and thought I could write about the solutions of all the 3 tasks for anyone who might be seeking for the same.&lt;/p&gt;
&lt;p&gt;This post is specifically about &lt;strong&gt;Task 1 - Data Preparation and Customer Analytics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are provided initially with the solution modules but still some parts and codes are a bit tough to crack. I did it my way but surely there could be various other solutions to the same problem.&lt;/p&gt;
&lt;p&gt;So, lets dive straight to the solutions.&lt;/p&gt;
&lt;div id=&#34;load-the-required-libraries&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load the required libraries&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)
library(ggplot2)
library(ggmosaic)
library(readr)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;examine-transaction-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examine transaction data&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Creating local dataset&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To inspect if certain columns are in their specified format for eg. date column is in date format etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Also, looking at the description of both the datasets&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;purchase_beahviour &amp;lt;- as.data.table( read.csv(&amp;quot;QVI_purchase_behaviour.csv&amp;quot;))
transaction_data &amp;lt;- as.data.table(readxl::read_xlsx(&amp;quot;QVI_transaction_data.xlsx&amp;quot;))

str(purchase_beahviour)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;data.table&amp;#39; and &amp;#39;data.frame&amp;#39;:   72637 obs. of  3 variables:
##  $ LYLTY_CARD_NBR  : int  1000 1002 1003 1004 1005 1007 1009 1010 1011 1012 ...
##  $ LIFESTAGE       : Factor w/ 7 levels &amp;quot;MIDAGE SINGLES/COUPLES&amp;quot;,..: 7 7 6 4 1 7 2 7 4 3 ...
##  $ PREMIUM_CUSTOMER: Factor w/ 3 levels &amp;quot;Budget&amp;quot;,&amp;quot;Mainstream&amp;quot;,..: 3 2 1 2 2 1 3 2 2 2 ...
##  - attr(*, &amp;quot;.internal.selfref&amp;quot;)=&amp;lt;externalptr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(transaction_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;data.table&amp;#39; and &amp;#39;data.frame&amp;#39;:   264836 obs. of  8 variables:
##  $ DATE          : num  43390 43599 43605 43329 43330 ...
##  $ STORE_NBR     : num  1 1 1 2 2 4 4 4 5 7 ...
##  $ LYLTY_CARD_NBR: num  1000 1307 1343 2373 2426 ...
##  $ TXN_ID        : num  1 348 383 974 1038 ...
##  $ PROD_NBR      : num  5 66 61 69 108 57 16 24 42 52 ...
##  $ PROD_NAME     : chr  &amp;quot;Natural Chip        Compny SeaSalt175g&amp;quot; &amp;quot;CCs Nacho Cheese    175g&amp;quot; &amp;quot;Smiths Crinkle Cut  Chips Chicken 170g&amp;quot; &amp;quot;Smiths Chip Thinly  S/Cream&amp;amp;Onion 175g&amp;quot; ...
##  $ PROD_QTY      : num  2 3 2 5 3 1 1 1 1 2 ...
##  $ TOT_SALES     : num  6 6.3 2.9 15 13.8 5.1 5.7 3.6 3.9 7.2 ...
##  - attr(*, &amp;quot;.internal.selfref&amp;quot;)=&amp;lt;externalptr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;EDA (done alreasy using str())&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;changes!&lt;/em&gt;
&lt;strong&gt;We saw that the date format is in &lt;em&gt;numeric&lt;/em&gt; format which is wrong so we convert it to the &lt;code&gt;date&lt;/code&gt; format as shown below&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transaction_data$DATE &amp;lt;- as.Date(transaction_data$DATE,origin = &amp;quot;1899-12-30&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Now dates are in the right format&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;examine-prod_name&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examine PROD_NAME&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Generating summary of the PROD_NAME column&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#head(transaction_data$PROD_NAME)
transaction_data[, .N, PROD_NAME]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                     PROD_NAME    N
##   1:   Natural Chip        Compny SeaSalt175g 1468
##   2:                 CCs Nacho Cheese    175g 1498
##   3:   Smiths Crinkle Cut  Chips Chicken 170g 1484
##   4:   Smiths Chip Thinly  S/Cream&amp;amp;Onion 175g 1473
##   5: Kettle Tortilla ChpsHny&amp;amp;Jlpno Chili 150g 3296
##  ---                                              
## 110:    Red Rock Deli Chikn&amp;amp;Garlic Aioli 150g 1434
## 111:      RRD SR Slow Rst     Pork Belly 150g 1526
## 112:                 RRD Pc Sea Salt     165g 1431
## 113:       Smith Crinkle Cut   Bolognese 150g 1451
## 114:                 Doritos Salsa Mild  300g 1472&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Warning~&lt;/em&gt;
Most of the products in PROD_NAME are chips but others may or may not exist.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;changes!&lt;/em&gt;
Looks like we are definitely looking at potato chips but how can we check that these are all chips? We can do some basic text analysis by summarising the individual words in the product name.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Examine the words in PROD_NAME to see if there are any incorrect entries
#### such as products that are not chips
productWords &amp;lt;- data.table(unlist(strsplit(unique(transaction_data[, PROD_NAME]), &amp;quot;
&amp;quot;)))
setnames(productWords, &amp;#39;words&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;As we are only interested in words that will tell us if the product is chips or not, let’s remove all words with digits and special characters such as ‘&amp;amp;’ from our set of product words. We can do this using &lt;code&gt;grepl()&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(stringr)
library(stringi)

#### Removing special characters
productWords$words &amp;lt;- str_replace_all(productWords$words,&amp;quot;[[:punct:]]&amp;quot;,&amp;quot; &amp;quot;)


#### Removing digits
productWords$words &amp;lt;- str_replace_all(productWords$words,&amp;quot;[0-9]&amp;quot;,&amp;quot; &amp;quot;)
productWords$words &amp;lt;- str_replace_all(productWords$words,&amp;quot;[gG]&amp;quot;,&amp;quot; &amp;quot;)

#### Let&amp;#39;s look at the most common words by counting the number of times a word appears and
wordsSep &amp;lt;- strsplit(productWords$words,&amp;quot; &amp;quot;)
words.freq&amp;lt;-table(unlist(wordsSep))

#### sorting them by this frequency in order of highest to lowest frequency
words.freq &amp;lt;-  as.data.frame(words.freq)
words.freq &amp;lt;- words.freq[order(words.freq$Freq, decreasing = T),]

words.freq&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                Var1 Freq
## 1                    732
## 37            Chips   21
## 164          Smiths   16
## 55          Crinkle   14
## 62              Cut   14
## 92           Kettle   13
## 26           Cheese   12
## 152            Salt   12
## 122             Ori   11
## 85             inal   10
## 34             Chip    9
## 68          Doritos    9
## 151           Salsa    9
## 29          Chicken    8
## 52             Corn    8
## 54            Cream    8
## 93              les    8
## 135            Prin    8
## 147             RRD    8
## 32           Chilli    7
## 204            Vine    7
## 209              WW    7
## 4                ar    6
## 156             Sea    6
## 168            Sour    6
## 57           Crisps    5
## 192          Thinly    5
## 193           Thins    5
## 38           Chives    4
## 65             Deli    4
## 86        Infuzions    4
## 95             Lime    4
## 110         Natural    4
## 139             Red    4
## 146            Rock    4
## 185         Supreme    4
## 186           Sweet    4
## 13              BBQ    3
## 22              CCs    3
## 49             Cobs    3
## 66              Dip    3
## 69               El    3
## 94               Li    3
## 103            Mild    3
## 116             Old    3
## 118           Onion    3
## 124            Paso    3
## 129            Popd    3
## 159      Sensations    3
## 171             Soy    3
## 188             Swt    3
## 196          Tomato    3
## 197        Tortilla    3
## 198        Tostitos    3
## 200        Twisties    3
## 208      Woolworths    3
## 3               And    2
## 6             arlic    2
## 19              Bur    2
## 27          Cheetos    2
## 28         Cheezels    2
## 35           ChipCo    2
## 46              Chs    2
## 70               er    2
## 74           French    2
## 78            Honey    2
## 84             htly    2
## 100          Medium    2
## 109           Nacho    2
## 132          Potato    2
## 137               r    2
## 138            rain    2
## 142             Rin    2
## 143              rn    2
## 149               s    2
## 150               S    2
## 154          Salted    2
## 163           Smith    2
## 169       SourCream    2
## 178              SR    2
## 189             Tan    2
## 191            Thai    2
## 201        Tyrrells    2
## 205           Waves    2
## 210               y    2
## 2             Aioli    1
## 5             arden    1
## 7                Ba    1
## 8             Bacon    1
## 9             Balls    1
## 10         Barbecue    1
## 11         Barbeque    1
## 12            Basil    1
## 14            Belly    1
## 15               Bi    1
## 16             Bolo    1
## 17              Box    1
## 18           Btroot    1
## 20        Camembert    1
## 21           camole    1
## 23            Chckn    1
## 24             Ched    1
## 25           Cheddr    1
## 30            Chikn    1
## 31            Chili    1
## 33      Chimuchurri    1
## 36         Chipotle    1
## 39             Chli    1
## 40            Chlli    1
## 41            Chnky    1
## 42              Chp    1
## 43       ChpsBtroot    1
## 44         ChpsFeta    1
## 45          ChpsHny    1
## 47           Chutny    1
## 48               Co    1
## 50          Coconut    1
## 51           Compny    1
## 53         Crackers    1
## 56            Crips    1
## 58              Crm    1
## 59              Crn    1
## 60         Crnchers    1
## 61           Crnkle    1
## 63          CutSalt    1
## 64                D    1
## 67           Dorito    1
## 71               Fi    1
## 72          Flavour    1
## 73             Frch    1
## 75     FriedChicken    1
## 76            Fries    1
## 77            Herbs    1
## 79             Hony    1
## 80              Hot    1
## 81              Hrb    1
## 82               ht    1
## 83               Ht    1
## 87           Infzns    1
## 88              inl    1
## 89         Jalapeno    1
## 90              Jam    1
## 91            Jlpno    1
## 96              Mac    1
## 97              Man    1
## 98            Maple    1
## 99              Med    1
## 101         Mexican    1
## 102        Mexicana    1
## 104      Mozzarella    1
## 105           Mstrd    1
## 106         Mystery    1
## 107         Mzzrlla    1
## 108               N    1
## 111             NCC    1
## 112            nese    1
## 113              nl    1
## 114               o    1
## 115              Of    1
## 117            Onin    1
## 119        OnionDip    1
## 120    OnionStacked    1
## 121              Or    1
## 123        Papadums    1
## 125              Pc    1
## 126          Pepper    1
## 127           Pesto    1
## 128            Plus    1
## 130            Pork    1
## 131             Pot    1
## 133       PotatoMix    1
## 134           Prawn    1
## 136           Puffs    1
## 140             Rib    1
## 141         Ricotta    1
## 144          rnWves    1
## 145           Roast    1
## 148             Rst    1
## 153           saltd    1
## 155           Sauce    1
## 157         SeaSalt    1
## 158 Seasonedchicken    1
## 160         Siracha    1
## 161            Slow    1
## 162             Slt    1
## 165          Smoked    1
## 166             Sna    1
## 167           Snbts    1
## 170        Southern    1
## 172              Sp    1
## 173            Spce    1
## 174            Spcy    1
## 175           Spicy    1
## 176          Splash    1
## 177              Sr    1
## 179         Stacked    1
## 180           Steak    1
## 181           Sthrn    1
## 182           Strws    1
## 183           Style    1
## 184        Sunbites    1
## 187      SweetChili    1
## 190           Tasty    1
## 194           Tmato    1
## 195             Tom    1
## 199         Truffle    1
## 202              Ve    1
## 203             Vin    1
## 206             Whl    1
## 207            Whle    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We saw that we have &lt;em&gt;whitespace&lt;/em&gt; maximum number of times and the second most occuring word is &lt;em&gt;chips&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;remove-salsa-products&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Remove salsa products&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;changes!&lt;/em&gt;
There are salsa products in the dataset but we are only interested in the chips
category, so let’s remove these.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transaction_data[, SALSA := grepl(&amp;quot;salsa&amp;quot;, tolower(PROD_NAME))]
transaction_data &amp;lt;- transaction_data[SALSA == FALSE, ][, SALSA := NULL]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we can use &lt;code&gt;summary()&lt;/code&gt; to check summary statistics such as mean, min and max
values for each feature to see if there are any obvious outliers in the data and if
there are any nulls in any of the columns (&lt;code&gt;NA&#39;s : number of nulls&lt;/code&gt; will appear in
the output if there are any nulls).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(transaction_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       DATE              STORE_NBR     LYLTY_CARD_NBR        TXN_ID       
##  Min.   :2018-07-01   Min.   :  1.0   Min.   :   1000   Min.   :      1  
##  1st Qu.:2018-09-30   1st Qu.: 70.0   1st Qu.:  70015   1st Qu.:  67569  
##  Median :2018-12-30   Median :130.0   Median : 130367   Median : 135183  
##  Mean   :2018-12-30   Mean   :135.1   Mean   : 135531   Mean   : 135131  
##  3rd Qu.:2019-03-31   3rd Qu.:203.0   3rd Qu.: 203084   3rd Qu.: 202654  
##  Max.   :2019-06-30   Max.   :272.0   Max.   :2373711   Max.   :2415841  
##     PROD_NBR       PROD_NAME            PROD_QTY         TOT_SALES      
##  Min.   :  1.00   Length:246742      Min.   :  1.000   Min.   :  1.700  
##  1st Qu.: 26.00   Class :character   1st Qu.:  2.000   1st Qu.:  5.800  
##  Median : 53.00   Mode  :character   Median :  2.000   Median :  7.400  
##  Mean   : 56.35                      Mean   :  1.908   Mean   :  7.321  
##  3rd Qu.: 87.00                      3rd Qu.:  2.000   3rd Qu.:  8.800  
##  Max.   :114.00                      Max.   :200.000   Max.   :650.000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are no nulls in the columns but product quantity appears to have an outlier
which we should investigate further. Let’s investigate further the case where 200
packets of chips are bought in one transaction.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(dplyr)

prod_qty_200 &amp;lt;- transaction_data %&amp;gt;% filter(PROD_QTY==200)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two transactions where 200 packets of chips are bought in one transaction
and both of these transactions were by the same customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lets-see-if-the-customer-has-had-other-transactions&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Let’s see if the customer has had other transactions&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is_it_same_customer &amp;lt;- transaction_data %&amp;gt;% filter(LYLTY_CARD_NBR == 226000) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like this customer has only had the two transactions over the year and is
not an ordinary retail customer. The customer might be buying chips for commercial purposes instead. We’ll remove this loyalty card number from further analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;removing-this-customer-from-the-list&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Removing this customer from the list&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transaction_data &amp;lt;- transaction_data[!(transaction_data$LYLTY_CARD_NBR == 226000)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;re-examine-transaction-data&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Re-examine transaction data&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(transaction_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       DATE              STORE_NBR     LYLTY_CARD_NBR        TXN_ID       
##  Min.   :2018-07-01   Min.   :  1.0   Min.   :   1000   Min.   :      1  
##  1st Qu.:2018-09-30   1st Qu.: 70.0   1st Qu.:  70015   1st Qu.:  67569  
##  Median :2018-12-30   Median :130.0   Median : 130367   Median : 135182  
##  Mean   :2018-12-30   Mean   :135.1   Mean   : 135530   Mean   : 135130  
##  3rd Qu.:2019-03-31   3rd Qu.:203.0   3rd Qu.: 203083   3rd Qu.: 202652  
##  Max.   :2019-06-30   Max.   :272.0   Max.   :2373711   Max.   :2415841  
##     PROD_NBR       PROD_NAME            PROD_QTY       TOT_SALES     
##  Min.   :  1.00   Length:246740      Min.   :1.000   Min.   : 1.700  
##  1st Qu.: 26.00   Class :character   1st Qu.:2.000   1st Qu.: 5.800  
##  Median : 53.00   Mode  :character   Median :2.000   Median : 7.400  
##  Mean   : 56.35                      Mean   :1.906   Mean   : 7.316  
##  3rd Qu.: 87.00                      3rd Qu.:2.000   3rd Qu.: 8.800  
##  Max.   :114.00                      Max.   :5.000   Max.   :29.500&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s better. Now, let’s look at the number of transaction lines over time to see
if there are any obvious data issues such as missing data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;count-the-number-of-transactions-by-date&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Count the number of transactions by date&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;countByDate &amp;lt;- count(transaction_data, transaction_data$DATE)
countByDate&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      transaction_data$DATE   n
##   1:            2018-07-01 663
##   2:            2018-07-02 650
##   3:            2018-07-03 674
##   4:            2018-07-04 669
##   5:            2018-07-05 660
##  ---                          
## 360:            2019-06-26 657
## 361:            2019-06-27 669
## 362:            2019-06-28 673
## 363:            2019-06-29 703
## 364:            2019-06-30 704&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(countByDate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 364&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(countByDate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  transaction_data$DATE       n        
##  Min.   :2018-07-01    Min.   :607.0  
##  1st Qu.:2018-09-29    1st Qu.:658.0  
##  Median :2018-12-30    Median :674.0  
##  Mean   :2018-12-30    Mean   :677.9  
##  3rd Qu.:2019-03-31    3rd Qu.:694.2  
##  Max.   :2019-06-30    Max.   :865.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s only 364 rows, meaning only 364 dates which indicates a missing date. Let’s
create a sequence of dates from 1 Jul 2018 to 30 Jun 2019 and use this to create a
chart of number of transactions over time to find the missing date.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-sequence-of-dates-and-join-this-the-count-of-transactions-by-date&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Create a sequence of dates and join this the count of transactions by date&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transaction_by_day &amp;lt;- transaction_data[order(DATE),]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;setting-plot-themes-to-format-graphs&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Setting plot themes to format graphs&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-transactions-over-time&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Plot transactions over time&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transOverTime &amp;lt;-ggplot(countByDate, aes(x = countByDate$`transaction_data$DATE`, y = countByDate$n)) +
 geom_line() +
 labs(x = &amp;quot;Day&amp;quot;, y = &amp;quot;Number of transactions&amp;quot;, title = &amp;quot;Transactions over time&amp;quot;) +
 scale_x_date(breaks = &amp;quot;1 month&amp;quot;) +
 theme(axis.text.x = element_text(angle = 90, vjust = 0.5))

transOverTime&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-08-31-task-1-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see that there is an increase in purchases in December and a break in late
December. Let’s zoom in on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-to-december-and-look-at-individual-days&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Filter to December and look at individual days&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filterData &amp;lt;- countByDate[countByDate$`transaction_data$DATE` &amp;gt;= &amp;quot;2018-12-01&amp;quot; &amp;amp; countByDate$`transaction_data$DATE` &amp;lt;= &amp;quot;2018-12-31&amp;quot;]

ggplot(filterData, aes(x = filterData$`transaction_data$DATE`, y = filterData$n)) +
 geom_line() +
 labs(x = &amp;quot;Day&amp;quot;, y = &amp;quot;Number of transactions&amp;quot;, title = &amp;quot;Transactions in December&amp;quot;) +
 scale_x_date(breaks = &amp;quot;1 day&amp;quot;) +
 theme(axis.text.x = element_text(angle = 90, vjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-08-31-task-1-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see that the increase in sales occurs in the lead-up to Christmas and that
there are zero sales on Christmas day itself. This is due to shops being closed on
Christmas day.&lt;/p&gt;
&lt;p&gt;Now that we are satisfied that the data no longer has outliers, we can move on to
creating other features such as brand of chips or pack size from PROD_NAME. We will
start with pack size.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pack-size&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Pack size&lt;/h4&gt;
&lt;p&gt;A new column &lt;em&gt;PACK SIZE&lt;/em&gt; added to the data frame &lt;em&gt;transaction_data&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### We can work this out by taking the digits that are in PROD_NAME
transaction_data[, PACK_SIZE := parse_number(PROD_NAME)]

#### Let&amp;#39;s check if the pack sizes look sensible 
df_packSizeVsTransactions &amp;lt;- transaction_data[, .N, PACK_SIZE][order(PACK_SIZE)]

df_packSizeVsTransactions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     PACK_SIZE     N
##  1:        70  1507
##  2:        90  3008
##  3:       110 22387
##  4:       125  1454
##  5:       134 25102
##  6:       135  3257
##  7:       150 40203
##  8:       160  2970
##  9:       165 15297
## 10:       170 19983
## 11:       175 66390
## 12:       180  1468
## 13:       190  2995
## 14:       200  4473
## 15:       210  6272
## 16:       220  1564
## 17:       250  3169
## 18:       270  6285
## 19:       330 12540
## 20:       380  6416&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The largest size is 380g and the smallest size is 70g - seems sensible!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lets-plot-a-histogram-of-pack_size-since-we-know-that-it-is-a-categorical-variable-and-not-a-continuous-variable-even-though-it-is-numeric.&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Let’s plot a histogram of PACK_SIZE since we know that it is a categorical variable and not a continuous variable even though it is numeric.&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#ggplot(df_packSizeVsTransactions, aes(x = df_packSizeVsTransactions$PACK_SIZE, y = df_packSizeVsTransactions$N)) +
# geom_line() +
 #labs(x = &amp;quot;Pack Sizes&amp;quot;, y = &amp;quot;Number of transactions&amp;quot;, title = &amp;quot;Transactions #over time&amp;quot;) + scale_x_continuous(breaks = seq(70,390,20)) +
 #theme(axis.text.x = element_text(angle = 90, vjust = 0.5))

hist(transaction_data[, PACK_SIZE])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-08-31-task-1-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Pack sizes created look reasonable.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;brands&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Brands&lt;/h4&gt;
&lt;p&gt;Now to create brands, we can use the first word in PROD_NAME to work out the brand
name…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Create a column which contains the brand of the product, by extracting it from the product name.


transaction_data$BRAND &amp;lt;- gsub(&amp;quot;([A-Za-z]+).*&amp;quot;, &amp;quot;\\1&amp;quot;, transaction_data$PROD_NAME)

transaction_data[, .N, by = BRAND][order(‐N)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          BRAND     N
##  1:     Kettle 41288
##  2:     Smiths 27390
##  3:   Pringles 25102
##  4:    Doritos 22041
##  5:      Thins 14075
##  6:        RRD 11894
##  7:  Infuzions 11057
##  8:         WW 10320
##  9:       Cobs  9693
## 10:   Tostitos  9471
## 11:   Twisties  9454
## 12:   Tyrrells  6442
## 13:      Grain  6272
## 14:    Natural  6050
## 15:   Cheezels  4603
## 16:        CCs  4551
## 17:        Red  4427
## 18:     Dorito  3183
## 19:     Infzns  3144
## 20:      Smith  2963
## 21:    Cheetos  2927
## 22:      Snbts  1576
## 23:     Burger  1564
## 24: Woolworths  1516
## 25:    GrnWves  1468
## 26:   Sunbites  1432
## 27:        NCC  1419
## 28:     French  1418
##          BRAND     N&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the brand names look like they are of the same brands - such as RED and
RRD, which are both Red Rock Deli chips. Let’s combine these together.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;clean-brand-names&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Clean brand names&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transaction_data[BRAND == &amp;quot;RED&amp;quot;, BRAND := &amp;quot;RRD&amp;quot;]
transaction_data[BRAND == &amp;quot;SNBTS&amp;quot;, BRAND := &amp;quot;SUNBITES&amp;quot;]
transaction_data[BRAND == &amp;quot;INFZNS&amp;quot;, BRAND := &amp;quot;INFUZIONS&amp;quot;]
transaction_data[BRAND == &amp;quot;WW&amp;quot;, BRAND := &amp;quot;WOOLWORTHS&amp;quot;]
transaction_data[BRAND == &amp;quot;SMITH&amp;quot;, BRAND := &amp;quot;SMITHS&amp;quot;]
transaction_data[BRAND == &amp;quot;NCC&amp;quot;, BRAND := &amp;quot;NATURAL&amp;quot;]
transaction_data[BRAND == &amp;quot;DORITO&amp;quot;, BRAND := &amp;quot;DORITOS&amp;quot;]
transaction_data[BRAND == &amp;quot;GRAIN&amp;quot;, BRAND := &amp;quot;GRNWVES&amp;quot;]


###Check again
transaction_data[, .N, by = BRAND][order(BRAND)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          BRAND     N
##  1:     Burger  1564
##  2:        CCs  4551
##  3:    Cheetos  2927
##  4:   Cheezels  4603
##  5:       Cobs  9693
##  6:     Dorito  3183
##  7:    Doritos 22041
##  8:     French  1418
##  9:      Grain  6272
## 10:    GrnWves  1468
## 11:  Infuzions 11057
## 12:     Infzns  3144
## 13:     Kettle 41288
## 14:    NATURAL  1419
## 15:    Natural  6050
## 16:   Pringles 25102
## 17:        RRD 11894
## 18:        Red  4427
## 19:      Smith  2963
## 20:     Smiths 27390
## 21:      Snbts  1576
## 22:   Sunbites  1432
## 23:      Thins 14075
## 24:   Tostitos  9471
## 25:   Twisties  9454
## 26:   Tyrrells  6442
## 27: WOOLWORTHS 10320
## 28: Woolworths  1516
##          BRAND     N&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;examining-customer-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examining customer data&lt;/h2&gt;
&lt;p&gt;Now that we are happy with the transaction dataset, let’s have a look at the
customer dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(purchase_beahviour)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  LYLTY_CARD_NBR                     LIFESTAGE       PREMIUM_CUSTOMER
##  Min.   :   1000   MIDAGE SINGLES/COUPLES: 7275   Budget    :24470  
##  1st Qu.:  66202   NEW FAMILIES          : 2549   Mainstream:29245  
##  Median : 134040   OLDER FAMILIES        : 9780   Premium   :18922  
##  Mean   : 136186   OLDER SINGLES/COUPLES :14609                     
##  3rd Qu.: 203375   RETIREES              :14805                     
##  Max.   :2373711   YOUNG FAMILIES        : 9178                     
##                    YOUNG SINGLES/COUPLES :14441&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s have a closer look at the LIFESTAGE and PREMIUM_CUSTOMER columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Examining the values of lifestage and premium_customer
purchase_beahviour[, .N, by = LIFESTAGE][order(‐N)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 LIFESTAGE     N
## 1:               RETIREES 14805
## 2:  OLDER SINGLES/COUPLES 14609
## 3:  YOUNG SINGLES/COUPLES 14441
## 4:         OLDER FAMILIES  9780
## 5:         YOUNG FAMILIES  9178
## 6: MIDAGE SINGLES/COUPLES  7275
## 7:           NEW FAMILIES  2549&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;purchase_beahviour[, .N, by = PREMIUM_CUSTOMER][order(‐N)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    PREMIUM_CUSTOMER     N
## 1:       Mainstream 29245
## 2:           Budget 24470
## 3:          Premium 18922&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;merge-transaction-data-to-customer-data&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Merge transaction data to customer data&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- merge(transaction_data, purchase_beahviour, all.x = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the number of rows in &lt;code&gt;data&lt;/code&gt; is the same as that of &lt;code&gt;transactionData&lt;/code&gt;, we can be
sure that no duplicates were created. This is because we created &lt;code&gt;data&lt;/code&gt; by setting
&lt;code&gt;all.x = TRUE&lt;/code&gt; (in other words, a left join) which means take all the rows in
&lt;code&gt;transactionData&lt;/code&gt; and find rows with matching values in shared columns and then
joining the details in these rows to the &lt;code&gt;x&lt;/code&gt; or the first mentioned table.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lets-also-check-if-some-customers-were-not-matched-on-by-checking-for-nulls.&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Let’s also check if some customers were not matched on by checking for nulls.&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apply(data, 2, function(x) any(is.na(x)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   LYLTY_CARD_NBR             DATE        STORE_NBR           TXN_ID 
##            FALSE            FALSE            FALSE            FALSE 
##         PROD_NBR        PROD_NAME         PROD_QTY        TOT_SALES 
##            FALSE            FALSE            FALSE            FALSE 
##        PACK_SIZE            BRAND        LIFESTAGE PREMIUM_CUSTOMER 
##            FALSE            FALSE            FALSE            FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, there are no nulls! So all our customers in the transaction data has been
accounted for in the customer dataset.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;for-task-2-we-write-this-dataset-into-a-csv-file&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;For Task 2, we write this dataset into a csv file&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(data,&amp;quot;QVI_data.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** Data exploration is now complete! **&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-analysis-on-customer-segments&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data analysis on customer segments&lt;/h1&gt;
&lt;p&gt;Now that the data is ready for analysis, we can define some metrics of interest to
the client:
- Who spends the most on chips (total sales), describing customers by lifestage and
how premium their general purchasing behaviour is
- How many customers are in each segment
- How many chips are bought per customer by segment
- What’s the average chip price by customer segment
We could also ask our data team for more information. Examples are:
- The customer’s total spend over the period and total spend for each transaction
to understand what proportion of their grocery spend is on chips
- Proportion of customers in each customer segment overall to compare against the
mix of customers who purchase chips
Let’s start with calculating total sales by LIFESTAGE and PREMIUM_CUSTOMER and
plotting the split by&lt;/p&gt;
&lt;div id=&#34;total-sales-by-lifestage-and-premium_customer&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Total sales by LIFESTAGE and PREMIUM_CUSTOMER&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;total_sales &amp;lt;- data %&amp;gt;% group_by(LIFESTAGE,PREMIUM_CUSTOMER)

pf.total_sales &amp;lt;- summarise(total_sales,sales_count=sum(TOT_SALES))

summary(pf.total_sales)

#### Create plot
p &amp;lt;- ggplot(pf.total_sales) + geom_mosaic(aes(weight = sales_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE),fill = PREMIUM_CUSTOMER)) + labs(x = &amp;quot;Lifestage&amp;quot;, y = &amp;quot;Premium customer flag&amp;quot;, title = &amp;quot;Proportion of sales&amp;quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) 

p +geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, &amp;#39;%&amp;#39;))), inherit.aes = F)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-08-31-task-1-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sales are coming mainly from Budget - older families, Mainstream - young
singles/couples, and Mainstream - retirees&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;number-of-customers-by-lifestage-and-premium_customer&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Number of customers by LIFESTAGE and PREMIUM_CUSTOMER&lt;/h4&gt;
&lt;p&gt;Let’s see if the higher sales are due to there being more customers who buy chips.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;total_sales &amp;lt;- data %&amp;gt;% group_by(LIFESTAGE,PREMIUM_CUSTOMER)

no_of_customers &amp;lt;- summarise(total_sales,customer_count = length(unique(LYLTY_CARD_NBR))) 
  
summary(no_of_customers)

#### Create plot
p &amp;lt;- ggplot(data = no_of_customers) + geom_mosaic(aes(weight = customer_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE), fill = PREMIUM_CUSTOMER)) + labs(x = &amp;quot;Lifestage&amp;quot;, y = &amp;quot;Premium customer flag&amp;quot;, title = &amp;quot;Proportion of customers&amp;quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+ geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, &amp;#39;%&amp;#39;))))


p&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-08-31-task-1-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-28-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are more Mainstream - young singles/couples and Mainstream - retirees who buy chips. This contributes to there being more sales to these customer segments but this is not a major driver for the Budget - Older families segment.&lt;/p&gt;
&lt;p&gt;Higher sales may also be driven by more units of chips being bought per customer.&lt;/p&gt;
&lt;p&gt;Let’s have a look at this next.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;average-number-of-units-per-customer-by-lifestage-and-premium_customer&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Average number of units per customer by LIFESTAGE and PREMIUM_CUSTOMER&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;total_sales_1 &amp;lt;-data %&amp;gt;% group_by(LIFESTAGE,PREMIUM_CUSTOMER)

units &amp;lt;-  summarise(total_sales_1, units_count = (sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR)))

summary(units)

###create plot
ggplot(data = units, aes(weight = units_count, x = LIFESTAGE, fill = PREMIUM_CUSTOMER)) + geom_bar(position = position_dodge()) +
labs(x = &amp;quot;Lifestage&amp;quot;, y = &amp;quot;Avg units per transaction&amp;quot;, title = &amp;quot;Units per customer&amp;quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-08-31-task-1-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-29-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;check &amp;lt;- units[order(units$units_count, decreasing = T),]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Older families and young families in general buy more chips per customer&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;average-price-per-unit-by-lifestage-and-premium_customer&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Average price per unit by LIFESTAGE and PREMIUM_CUSTOMER&lt;/h4&gt;
&lt;p&gt;Let’s also investigate the average price per unit chips bought for each customer segment as this is also a driver of total sales.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;total_sales_2 &amp;lt;-data %&amp;gt;% group_by(LIFESTAGE,PREMIUM_CUSTOMER)

pricePerUnit &amp;lt;-  summarise(total_sales_2, price_per_unit = (sum(TOT_SALES)/sum(PROD_QTY)))

####plot
ggplot(data=pricePerUnit, aes(weight = price_per_unit,x = LIFESTAGE, fill = PREMIUM_CUSTOMER)) + geom_bar(position = position_dodge()) + labs(x = &amp;quot;Lifestage&amp;quot;, y = &amp;quot;Avg price per unit&amp;quot;, title = &amp;quot;Price per unit&amp;quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-08-31-task-1-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-30-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Mainstream midage and young singles and couples are more willing to pay more per packet of chips compared to their budget and premium counterparts. This may be due to premium shoppers being more likely to buy healthy snacks and when they buy chips, this is mainly for entertainment purposes rather than their own consumption. This is also supported by there being fewer premium midage and young singles and couples buying chips compared to their mainstream counterparts.&lt;/p&gt;
&lt;p&gt;As the difference in average price per unit isn’t large, we can check if this difference is statistically different.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;perform-an-independent-t-test-between-mainstream-vs-premium-and-budget-midage-and-young-singles-and-couples&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Perform an independent t-test between mainstream vs premium and budget midage and young singles and couples&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If this p-value is above .05, then there is not a significant difference in test scores.

pricePerUnit &amp;lt;‐ data[, price := TOT_SALES/PROD_QTY]

t.test(data[LIFESTAGE %in% c(&amp;quot;YOUNG SINGLES/COUPLES&amp;quot;, &amp;quot;MIDAGE SINGLES/COUPLES&amp;quot;) &amp;amp; PREMIUM_CUSTOMER == &amp;quot;Mainstream&amp;quot;, price],data[LIFESTAGE %in% c(&amp;quot;YOUNG SINGLES/COUPLES&amp;quot;, &amp;quot;MIDAGE SINGLES/COUPLES&amp;quot;) &amp;amp; PREMIUM_CUSTOMER != &amp;quot;Mainstream&amp;quot;, price], alternative = &amp;quot;greater&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  data[LIFESTAGE %in% c(&amp;quot;YOUNG SINGLES/COUPLES&amp;quot;, &amp;quot;MIDAGE SINGLES/COUPLES&amp;quot;) &amp;amp;  and data[LIFESTAGE %in% c(&amp;quot;YOUNG SINGLES/COUPLES&amp;quot;, &amp;quot;MIDAGE SINGLES/COUPLES&amp;quot;) &amp;amp;     PREMIUM_CUSTOMER == &amp;quot;Mainstream&amp;quot;, price] and     PREMIUM_CUSTOMER != &amp;quot;Mainstream&amp;quot;, price]
## t = 37.624, df = 54791, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true difference in means is greater than 0
## 95 percent confidence interval:
##  0.3187234       Inf
## sample estimates:
## mean of x mean of y 
##  4.039786  3.706491&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The t-test results in a p-value &amp;lt; 2.2e-16, i.e. the unit price for mainstream, young and mid-age singles and couples ARE significantly higher than that of budget or premium, young and midage singles and couples.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;deep-dive-into-specific-customer-segments-for-insights&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Deep dive into specific customer segments for insights&lt;/h2&gt;
&lt;p&gt;We have found quite a few interesting insights that we can dive deeper into.
We might want to target customer segments that contribute the most to sales to retain them or further increase sales. Let’s look at Mainstream - young singles/couples. For instance, let’s find out if they tend to buy a particular brand of chips.&lt;/p&gt;
&lt;div id=&#34;deep-dive-into-mainstream-young-singlescouples&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Deep dive into Mainstream, young singles/couples&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Deep dive into Mainstream, young singles/couples
segment1 &amp;lt;- data[LIFESTAGE == &amp;quot;YOUNG SINGLES/COUPLES&amp;quot; &amp;amp; PREMIUM_CUSTOMER == &amp;quot;Mainstream&amp;quot;,]
other &amp;lt;- data[!(LIFESTAGE == &amp;quot;YOUNG SINGLES/COUPLES&amp;quot; &amp;amp; PREMIUM_CUSTOMER ==&amp;quot;Mainstream&amp;quot;),]

#### Brand affinity compared to the rest of the population
quantity_segment1 &amp;lt;- segment1[, sum(PROD_QTY)]

quantity_other &amp;lt;- other[, sum(PROD_QTY)]

quantity_segment1_by_brand &amp;lt;- segment1[, .(targetSegment = sum(PROD_QTY)/quantity_segment1), by = BRAND]

quantity_other_by_brand &amp;lt;- other[, .(other = sum(PROD_QTY)/quantity_other), by = BRAND]

brand_proportions &amp;lt;- merge(quantity_segment1_by_brand, quantity_other_by_brand)[, affinityToBrand := targetSegment/other]

brand_proportions[order(‐affinityToBrand)]

ggplot(brand_proportions, aes(brand_proportions$BRAND,brand_proportions$affinityToBrand)) + geom_bar(stat = &amp;quot;identity&amp;quot;,fill = &amp;quot;yellow&amp;quot;) + labs(x = &amp;quot;Brand&amp;quot;, y = &amp;quot;Customers Affinity to Brand&amp;quot;, title = &amp;quot;Favorite brands of Customers&amp;quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-08-31-task-1-retail-strategy-and-analytics_files/figure-html/unnamed-chunk-32-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see that:&lt;/p&gt;
&lt;p&gt;• Mainstream young singles/couples are 23% more likely to purchase Tyrrells chips compared to the
rest of the population
• Mainstream young singles/couples are 56% less likely to purchase Burger Rings compared to the rest
of the population&lt;/p&gt;
&lt;p&gt;[INSIGHTS]
Let’s also find out if our target segment tends to buy larger packs of chips.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;preferred-pack-size-compared-to-the-rest-of-the-population&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Preferred pack size compared to the rest of the population&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantity_segment1_by_pack &amp;lt;- segment1[, .(targetSegment = sum(PROD_QTY)/quantity_segment1), by = PACK_SIZE]

quantity_other_by_pack &amp;lt;- other[, .(other = sum(PROD_QTY)/quantity_other), by = PACK_SIZE]

pack_proportions &amp;lt;- merge(quantity_segment1_by_pack, quantity_other_by_pack)[, affinityToPack := targetSegment/other]

pack_proportions[order(‐affinityToPack)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that the preferred &lt;code&gt;PACK_SIZE&lt;/code&gt; is 270g.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data[PACK_SIZE == 270, unique(PROD_NAME)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Twisties Cheese     270g&amp;quot; &amp;quot;Twisties Chicken270g&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Let’s recap what we’ve found!
Sales have mainly been due to Budget - older families, Mainstream young singles/couples, and Mainstream - retirees shoppers. We found that the high spend in chips for mainstream young singles/couples and retirees is due to there being more of them than other buyers. Mainstream, midage and young singles and couples are also more likely to pay more per packet of chips. This is indicative of impulse buying behaviour.&lt;/p&gt;
&lt;p&gt;We’ve also found that Mainstream young singles and couples are 23% more likely to purchase Tyrrells chips compared to the rest of the population. The Category Manager may want to increase the category’s performance by off-locating some Tyrrells and smaller packs of chips in discretionary space near segments where young singles and couples frequent more often to increase visibilty and impulse behaviour.&lt;/p&gt;
&lt;p&gt;Quantium can help the Category Manager with recommendations of where these segments are and further help them with measuring the impact of the changed placement. We’ll work on measuring the impact of trials in the next task and putting all these together in the third task.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;outro&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Outro&lt;/h1&gt;
&lt;p&gt;Task 1 was basic but crucial. All the basic analysis and visualizations were made here. The general patterns and trends among customers’ choices were explored through visualizations.&lt;/p&gt;
&lt;p&gt;The solutions to the other tasks will be uploaded soon. Till then, any feedbacks, queries or recommendations are appreciated on any of my &lt;strong&gt;social media handles&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Refer to my &lt;a href=&#34;https://github.com/shrish83/VirtualInternships_InsideSherpa/blob/master/VP1_QuantiumDataAnalytics/task1.Rmd&#34;&gt;Github Profile&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stay tuned for more tutorials!&lt;br/&gt;
Thank You!&lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Tidyverse Series - dplyr - Episode 1</title>
      <link>/2020/07/tidyverse-series-dplyr-episode-1/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/tidyverse-series-dplyr-episode-1/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this series, we are going to talk about data manipulation in R. The data we obtain or collect from various sources is usually unstructured or comprises information that is futile for our purpose. Therefore, spending time on the entire dataset is needless and inessential.&lt;/p&gt;
&lt;p&gt;So, &lt;strong&gt;Data Manipulation&lt;/strong&gt; is the key. We transform our data according to our needs which is significant for robust analysis. We &lt;em&gt;manipulate&lt;/em&gt; data for further easy processing.&lt;/p&gt;
&lt;p&gt;R has many built-in libraries and functions for our desired task.&lt;/p&gt;
&lt;p&gt;In this episode, we start with the widely used &lt;strong&gt;tidyverse&lt;/strong&gt; which &lt;em&gt;is an opinionated collection of R packages designed for data science.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tidyverse&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;tidyverse&lt;/h1&gt;
&lt;p&gt;The &lt;em&gt;tidyverse&lt;/em&gt; is an umbrella term comprising many packages for data interaction. Let’s learn its installation process which similar to any other installation.&lt;/p&gt;
&lt;p&gt;Also load it into your R session.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;quot;tidyverse&amp;quot;)

library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are four main packages for &lt;em&gt;Data wrangling and Transformation:&lt;/em&gt;
* dplyr
* tidyr
* stringr
* forcats&lt;/p&gt;
&lt;p&gt;We are going to learn about the &lt;strong&gt;dplyr&lt;/strong&gt; package in depth in this episode.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dplyr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;dplyr&lt;/h1&gt;
&lt;p&gt;dplyr is a &lt;em&gt;grammer of data manipulation providing a consistent set of verbs that solve the most common data manipulation challenges.&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;quot;dplyr&amp;quot;)

library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Single Table Verbs&lt;/strong&gt;
This tutorial guides you through dplyr’s basic set of tools.&lt;/p&gt;
&lt;div id=&#34;choosing-dataset&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Choosing dataset&lt;/h4&gt;
&lt;p&gt;Using &lt;code&gt;data()&lt;/code&gt; to reveal in-built datasets.
In this tutorial, we are going to use the &lt;code&gt;Titanic&lt;/code&gt; dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#data()

#Loading the dataset

data(&amp;quot;Titanic&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;viewing-the-description-of-the-dataset&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Viewing the description of the dataset&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(Titanic)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  &amp;#39;table&amp;#39; num [1:4, 1:2, 1:2, 1:2] 0 0 35 0 0 0 17 0 118 154 ...
##  - attr(*, &amp;quot;dimnames&amp;quot;)=List of 4
##   ..$ Class   : chr [1:4] &amp;quot;1st&amp;quot; &amp;quot;2nd&amp;quot; &amp;quot;3rd&amp;quot; &amp;quot;Crew&amp;quot;
##   ..$ Sex     : chr [1:2] &amp;quot;Male&amp;quot; &amp;quot;Female&amp;quot;
##   ..$ Age     : chr [1:2] &amp;quot;Child&amp;quot; &amp;quot;Adult&amp;quot;
##   ..$ Survived: chr [1:2] &amp;quot;No&amp;quot; &amp;quot;Yes&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-local-dataset-for-easier-working&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Creating a local dataset for easier working&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_titanic &amp;lt;- as.data.frame(Titanic)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Observations x Features&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(df_titanic)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 32  5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-pipe-function---a-better-alternative&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The &lt;code&gt;pipe&lt;/code&gt; Function - a better alternative&lt;/h1&gt;
&lt;p&gt;All the functions take the dataset as the first argument. Using the &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator that is the &lt;code&gt;pipe&lt;/code&gt; operator makes our working easier. For instance, an argument or the dataset &lt;code&gt;x&lt;/code&gt; in some &lt;code&gt;function(x,y)&lt;/code&gt; becomes &lt;code&gt;x %&amp;gt;% function(y)&lt;/code&gt; which means that results from previous steps can be piped into another or the next steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;single-table-verbs&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Single Table Verbs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Functions manipulating the dataset with &lt;em&gt;rows&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;filter-subsetting-our-observationsrows-based-on-filtered-columsfeatures&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;1. &lt;code&gt;filter()&lt;/code&gt;: subsetting our observations/rows based on filtered colums/features&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;How many children survived in the tragedy?&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_titanic %&amp;gt;% filter(Age == &amp;quot;Child&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class    Sex   Age Survived Freq
## 1    1st   Male Child       No    0
## 2    2nd   Male Child       No    0
## 3    3rd   Male Child       No   35
## 4   Crew   Male Child       No    0
## 5    1st Female Child       No    0
## 6    2nd Female Child       No    0
## 7    3rd Female Child       No   17
## 8   Crew Female Child       No    0
## 9    1st   Male Child      Yes    5
## 10   2nd   Male Child      Yes   11
## 11   3rd   Male Child      Yes   13
## 12  Crew   Male Child      Yes    0
## 13   1st Female Child      Yes    1
## 14   2nd Female Child      Yes   13
## 15   3rd Female Child      Yes   14
## 16  Crew Female Child      Yes    0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How many adult females from the 3rd class survived the tragedy?&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_titanic %&amp;gt;% filter(Sex==&amp;quot;Female&amp;quot;,Age == &amp;quot;Adult&amp;quot;,Class==&amp;quot;3rd&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Class    Sex   Age Survived Freq
## 1   3rd Female Adult       No   89
## 2   3rd Female Adult      Yes   76&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;arrange-subsetting-our-observationsrows-based-on-arranging-columsfeatures-in-unique-or-different-order&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;2. &lt;code&gt;arrange()&lt;/code&gt; : subsetting our observations/rows based on arranging colums/features in unique or different order&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Arranging rows according to the increasing order of number of people who survived:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_titanic %&amp;gt;% arrange(Freq)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class    Sex   Age Survived Freq
## 1    1st   Male Child       No    0
## 2    2nd   Male Child       No    0
## 3   Crew   Male Child       No    0
## 4    1st Female Child       No    0
## 5    2nd Female Child       No    0
## 6   Crew Female Child       No    0
## 7   Crew   Male Child      Yes    0
## 8   Crew Female Child      Yes    0
## 9    1st Female Child      Yes    1
## 10  Crew Female Adult       No    3
## 11   1st Female Adult       No    4
## 12   1st   Male Child      Yes    5
## 13   2nd   Male Child      Yes   11
## 14   2nd Female Adult       No   13
## 15   3rd   Male Child      Yes   13
## 16   2nd Female Child      Yes   13
## 17   3rd Female Child      Yes   14
## 18   2nd   Male Adult      Yes   14
## 19   3rd Female Child       No   17
## 20  Crew Female Adult      Yes   20
## 21   3rd   Male Child       No   35
## 22   1st   Male Adult      Yes   57
## 23   3rd   Male Adult      Yes   75
## 24   3rd Female Adult      Yes   76
## 25   2nd Female Adult      Yes   80
## 26   3rd Female Adult       No   89
## 27   1st   Male Adult       No  118
## 28   1st Female Adult      Yes  140
## 29   2nd   Male Adult       No  154
## 30  Crew   Male Adult      Yes  192
## 31   3rd   Male Adult       No  387
## 32  Crew   Male Adult       No  670&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#in the descending order
df_titanic %&amp;gt;% arrange(desc(Freq))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class    Sex   Age Survived Freq
## 1   Crew   Male Adult       No  670
## 2    3rd   Male Adult       No  387
## 3   Crew   Male Adult      Yes  192
## 4    2nd   Male Adult       No  154
## 5    1st Female Adult      Yes  140
## 6    1st   Male Adult       No  118
## 7    3rd Female Adult       No   89
## 8    2nd Female Adult      Yes   80
## 9    3rd Female Adult      Yes   76
## 10   3rd   Male Adult      Yes   75
## 11   1st   Male Adult      Yes   57
## 12   3rd   Male Child       No   35
## 13  Crew Female Adult      Yes   20
## 14   3rd Female Child       No   17
## 15   3rd Female Child      Yes   14
## 16   2nd   Male Adult      Yes   14
## 17   2nd Female Adult       No   13
## 18   3rd   Male Child      Yes   13
## 19   2nd Female Child      Yes   13
## 20   2nd   Male Child      Yes   11
## 21   1st   Male Child      Yes    5
## 22   1st Female Adult       No    4
## 23  Crew Female Adult       No    3
## 24   1st Female Child      Yes    1
## 25   1st   Male Child       No    0
## 26   2nd   Male Child       No    0
## 27  Crew   Male Child       No    0
## 28   1st Female Child       No    0
## 29   2nd Female Child       No    0
## 30  Crew Female Child       No    0
## 31  Crew   Male Child      Yes    0
## 32  Crew Female Child      Yes    0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;slice-indexing-rowsobservations-using-their-integer-locations&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;3. &lt;code&gt;slice()&lt;/code&gt; : indexing rows/observations using their integer locations&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#rows between 6 to 27
df_titanic %&amp;gt;% slice(6:27)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class    Sex   Age Survived Freq
## 1    2nd Female Child       No    0
## 2    3rd Female Child       No   17
## 3   Crew Female Child       No    0
## 4    1st   Male Adult       No  118
## 5    2nd   Male Adult       No  154
## 6    3rd   Male Adult       No  387
## 7   Crew   Male Adult       No  670
## 8    1st Female Adult       No    4
## 9    2nd Female Adult       No   13
## 10   3rd Female Adult       No   89
## 11  Crew Female Adult       No    3
## 12   1st   Male Child      Yes    5
## 13   2nd   Male Child      Yes   11
## 14   3rd   Male Child      Yes   13
## 15  Crew   Male Child      Yes    0
## 16   1st Female Child      Yes    1
## 17   2nd Female Child      Yes   13
## 18   3rd Female Child      Yes   14
## 19  Crew Female Child      Yes    0
## 20   1st   Male Adult      Yes   57
## 21   2nd   Male Adult      Yes   14
## 22   3rd   Male Adult      Yes   75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#first 3 rows
df_titanic %&amp;gt;% slice_head(n=3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Class  Sex   Age Survived Freq
## 1   1st Male Child       No    0
## 2   2nd Male Child       No    0
## 3   3rd Male Child       No   35&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#for selecting observation at random
df_titanic %&amp;gt;% slice_sample(n=6)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Class    Sex   Age Survived Freq
## 1   2nd   Male Child       No    0
## 2   3rd Female Adult      Yes   76
## 3   2nd Female Adult       No   13
## 4   2nd Female Adult      Yes   80
## 5   1st   Male Child       No    0
## 6   1st   Male Adult      Yes   57&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#rows with top five values of Freq
df_titanic %&amp;gt;% slice_max(Freq,n=5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Class    Sex   Age Survived Freq
## 1  Crew   Male Adult       No  670
## 2   3rd   Male Adult       No  387
## 3  Crew   Male Adult      Yes  192
## 4   2nd   Male Adult       No  154
## 5   1st Female Adult      Yes  140&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Functions manipulating the dataset with &lt;em&gt;columns&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;select-selecting-or-choosing-a-few-columns-while-discarding-others-that-are-of-no-use-thereby-reducing-our-valuable-time&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;1. &lt;code&gt;select()&lt;/code&gt; : selecting or choosing a few columns while discarding others that are of no use thereby reducing our valuable time&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;How many males and females survived the tragedy?&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#shows only two columns
df_titanic %&amp;gt;% select(Sex,Survived)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Sex Survived
## 1    Male       No
## 2    Male       No
## 3    Male       No
## 4    Male       No
## 5  Female       No
## 6  Female       No
## 7  Female       No
## 8  Female       No
## 9    Male       No
## 10   Male       No
## 11   Male       No
## 12   Male       No
## 13 Female       No
## 14 Female       No
## 15 Female       No
## 16 Female       No
## 17   Male      Yes
## 18   Male      Yes
## 19   Male      Yes
## 20   Male      Yes
## 21 Female      Yes
## 22 Female      Yes
## 23 Female      Yes
## 24 Female      Yes
## 25   Male      Yes
## 26   Male      Yes
## 27   Male      Yes
## 28   Male      Yes
## 29 Female      Yes
## 30 Female      Yes
## 31 Female      Yes
## 32 Female      Yes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;But,&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#shows all the columns from &amp;#39;sex&amp;#39; through to &amp;#39;survived&amp;#39;(inclusive)
df_titanic %&amp;gt;% select(Sex:Survived)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Sex   Age Survived
## 1    Male Child       No
## 2    Male Child       No
## 3    Male Child       No
## 4    Male Child       No
## 5  Female Child       No
## 6  Female Child       No
## 7  Female Child       No
## 8  Female Child       No
## 9    Male Adult       No
## 10   Male Adult       No
## 11   Male Adult       No
## 12   Male Adult       No
## 13 Female Adult       No
## 14 Female Adult       No
## 15 Female Adult       No
## 16 Female Adult       No
## 17   Male Child      Yes
## 18   Male Child      Yes
## 19   Male Child      Yes
## 20   Male Child      Yes
## 21 Female Child      Yes
## 22 Female Child      Yes
## 23 Female Child      Yes
## 24 Female Child      Yes
## 25   Male Adult      Yes
## 26   Male Adult      Yes
## 27   Male Adult      Yes
## 28   Male Adult      Yes
## 29 Female Adult      Yes
## 30 Female Adult      Yes
## 31 Female Adult      Yes
## 32 Female Adult      Yes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;And this code below deselects the mentioned columns as arguments:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_titanic %&amp;gt;% select(-c(Sex,Age))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class Survived Freq
## 1    1st       No    0
## 2    2nd       No    0
## 3    3rd       No   35
## 4   Crew       No    0
## 5    1st       No    0
## 6    2nd       No    0
## 7    3rd       No   17
## 8   Crew       No    0
## 9    1st       No  118
## 10   2nd       No  154
## 11   3rd       No  387
## 12  Crew       No  670
## 13   1st       No    4
## 14   2nd       No   13
## 15   3rd       No   89
## 16  Crew       No    3
## 17   1st      Yes    5
## 18   2nd      Yes   11
## 19   3rd      Yes   13
## 20  Crew      Yes    0
## 21   1st      Yes    1
## 22   2nd      Yes   13
## 23   3rd      Yes   14
## 24  Crew      Yes    0
## 25   1st      Yes   57
## 26   2nd      Yes   14
## 27   3rd      Yes   75
## 28  Crew      Yes  192
## 29   1st      Yes  140
## 30   2nd      Yes   80
## 31   3rd      Yes   76
## 32  Crew      Yes   20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Let us learn some of the &lt;code&gt;helper functions&lt;/code&gt; that are used alomg with the &lt;code&gt;select()&lt;/code&gt; function:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;starts_with()&lt;/li&gt;
&lt;li&gt;ends_with()&lt;/li&gt;
&lt;li&gt;matches()&lt;/li&gt;
&lt;li&gt;contains()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;For instance:&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_titanic %&amp;gt;% select(starts_with(&amp;quot;S&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Sex Survived
## 1    Male       No
## 2    Male       No
## 3    Male       No
## 4    Male       No
## 5  Female       No
## 6  Female       No
## 7  Female       No
## 8  Female       No
## 9    Male       No
## 10   Male       No
## 11   Male       No
## 12   Male       No
## 13 Female       No
## 14 Female       No
## 15 Female       No
## 16 Female       No
## 17   Male      Yes
## 18   Male      Yes
## 19   Male      Yes
## 20   Male      Yes
## 21 Female      Yes
## 22 Female      Yes
## 23 Female      Yes
## 24 Female      Yes
## 25   Male      Yes
## 26   Male      Yes
## 27   Male      Yes
## 28   Male      Yes
## 29 Female      Yes
## 30 Female      Yes
## 31 Female      Yes
## 32 Female      Yes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rename-using-this-function-is-recommended-in-place-of-select&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;2. &lt;code&gt;rename()&lt;/code&gt; : Using this function is recommended in place of &lt;code&gt;select()&lt;/code&gt;&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;###rename
df_titanic %&amp;gt;% rename(Cl_ass = Class)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Cl_ass    Sex   Age Survived Freq
## 1     1st   Male Child       No    0
## 2     2nd   Male Child       No    0
## 3     3rd   Male Child       No   35
## 4    Crew   Male Child       No    0
## 5     1st Female Child       No    0
## 6     2nd Female Child       No    0
## 7     3rd Female Child       No   17
## 8    Crew Female Child       No    0
## 9     1st   Male Adult       No  118
## 10    2nd   Male Adult       No  154
## 11    3rd   Male Adult       No  387
## 12   Crew   Male Adult       No  670
## 13    1st Female Adult       No    4
## 14    2nd Female Adult       No   13
## 15    3rd Female Adult       No   89
## 16   Crew Female Adult       No    3
## 17    1st   Male Child      Yes    5
## 18    2nd   Male Child      Yes   11
## 19    3rd   Male Child      Yes   13
## 20   Crew   Male Child      Yes    0
## 21    1st Female Child      Yes    1
## 22    2nd Female Child      Yes   13
## 23    3rd Female Child      Yes   14
## 24   Crew Female Child      Yes    0
## 25    1st   Male Adult      Yes   57
## 26    2nd   Male Adult      Yes   14
## 27    3rd   Male Adult      Yes   75
## 28   Crew   Male Adult      Yes  192
## 29    1st Female Adult      Yes  140
## 30    2nd Female Adult      Yes   80
## 31    3rd Female Adult      Yes   76
## 32   Crew Female Adult      Yes   20&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;###select
df_titanic %&amp;gt;% select(S_ex = Sex)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      S_ex
## 1    Male
## 2    Male
## 3    Male
## 4    Male
## 5  Female
## 6  Female
## 7  Female
## 8  Female
## 9    Male
## 10   Male
## 11   Male
## 12   Male
## 13 Female
## 14 Female
## 15 Female
## 16 Female
## 17   Male
## 18   Male
## 19   Male
## 20   Male
## 21 Female
## 22 Female
## 23 Female
## 24 Female
## 25   Male
## 26   Male
## 27   Male
## 28   Male
## 29 Female
## 30 Female
## 31 Female
## 32 Female&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note: Return back to original data frame.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_titanic &amp;lt;- as.data.frame(Titanic)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;mutate-it-is-basically-used-to-add-new-columns-which-are-created-using-the-existing-columns-as-the-new-columns-that-are-to-be-added-i.e-mutated-are-functions-of-the-existng-columns&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;2. &lt;code&gt;mutate()&lt;/code&gt; : It is basically used to add new columns which are created using the existing columns as the new columns that are to be added i.e mutated are functions of the existng columns&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;Suppose there were about a thousand people on board, then what percenatge of people survived? &lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Assume total = 1000 thus 100/1000 for percentage i.e 0.1
df_titanic %&amp;gt;% mutate(Freq_per =  Freq * 0.1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class    Sex   Age Survived Freq Freq_per
## 1    1st   Male Child       No    0      0.0
## 2    2nd   Male Child       No    0      0.0
## 3    3rd   Male Child       No   35      3.5
## 4   Crew   Male Child       No    0      0.0
## 5    1st Female Child       No    0      0.0
## 6    2nd Female Child       No    0      0.0
## 7    3rd Female Child       No   17      1.7
## 8   Crew Female Child       No    0      0.0
## 9    1st   Male Adult       No  118     11.8
## 10   2nd   Male Adult       No  154     15.4
## 11   3rd   Male Adult       No  387     38.7
## 12  Crew   Male Adult       No  670     67.0
## 13   1st Female Adult       No    4      0.4
## 14   2nd Female Adult       No   13      1.3
## 15   3rd Female Adult       No   89      8.9
## 16  Crew Female Adult       No    3      0.3
## 17   1st   Male Child      Yes    5      0.5
## 18   2nd   Male Child      Yes   11      1.1
## 19   3rd   Male Child      Yes   13      1.3
## 20  Crew   Male Child      Yes    0      0.0
## 21   1st Female Child      Yes    1      0.1
## 22   2nd Female Child      Yes   13      1.3
## 23   3rd Female Child      Yes   14      1.4
## 24  Crew Female Child      Yes    0      0.0
## 25   1st   Male Adult      Yes   57      5.7
## 26   2nd   Male Adult      Yes   14      1.4
## 27   3rd   Male Adult      Yes   75      7.5
## 28  Crew   Male Adult      Yes  192     19.2
## 29   1st Female Adult      Yes  140     14.0
## 30   2nd Female Adult      Yes   80      8.0
## 31   3rd Female Adult      Yes   76      7.6
## 32  Crew Female Adult      Yes   20      2.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;relocate-basically-relocating-or-moving-columns&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;3. &lt;code&gt;relocate()&lt;/code&gt; : basically relocating or moving columns&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;In the code below, the columns between ‘sex’ and ‘Age’ (both inclusive) are placed before the column ‘Class’ using the &lt;code&gt;.before&lt;/code&gt; attribute.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_titanic %&amp;gt;% relocate(Sex:Age, .before = Class)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Sex   Age Class Survived Freq
## 1    Male Child   1st       No    0
## 2    Male Child   2nd       No    0
## 3    Male Child   3rd       No   35
## 4    Male Child  Crew       No    0
## 5  Female Child   1st       No    0
## 6  Female Child   2nd       No    0
## 7  Female Child   3rd       No   17
## 8  Female Child  Crew       No    0
## 9    Male Adult   1st       No  118
## 10   Male Adult   2nd       No  154
## 11   Male Adult   3rd       No  387
## 12   Male Adult  Crew       No  670
## 13 Female Adult   1st       No    4
## 14 Female Adult   2nd       No   13
## 15 Female Adult   3rd       No   89
## 16 Female Adult  Crew       No    3
## 17   Male Child   1st      Yes    5
## 18   Male Child   2nd      Yes   11
## 19   Male Child   3rd      Yes   13
## 20   Male Child  Crew      Yes    0
## 21 Female Child   1st      Yes    1
## 22 Female Child   2nd      Yes   13
## 23 Female Child   3rd      Yes   14
## 24 Female Child  Crew      Yes    0
## 25   Male Adult   1st      Yes   57
## 26   Male Adult   2nd      Yes   14
## 27   Male Adult   3rd      Yes   75
## 28   Male Adult  Crew      Yes  192
## 29 Female Adult   1st      Yes  140
## 30 Female Adult   2nd      Yes   80
## 31 Female Adult   3rd      Yes   76
## 32 Female Adult  Crew      Yes   20&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Functions manipulating the dataset with &lt;em&gt;group of data&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;summarise-collapses-a-data-frame-to-a-single-row&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;1. &lt;code&gt;summarise()&lt;/code&gt; : &lt;em&gt;collapses a data frame to a single row&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Using mean of the &lt;code&gt;Freq&lt;/code&gt; column and removing any NA values that exist &lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_titanic %&amp;gt;% summarise(Freq = mean(Freq, na.rm = T))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Freq
## 1 68.78125&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note: The similarities in all of the above functions is their syntax like the dataset as their first argument which can be piped as well and the next set of arguments as to what action has to be performed on the dataset, etc.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, this is it. We chose a simple, small dataset to start with and learnt how to manipulate data using a few simple functions.&lt;/p&gt;
&lt;p&gt;You can chose any other dataset from the in-built ones or from many websites offering datasets for free. Here are some of the sites that I recommend:
&lt;a href=&#34;https://www.gapminder.org/data/&#34;&gt;Gapminder&lt;/a&gt;
&lt;a href=&#34;https://catalog.data.gov/dataset&#34;&gt;Data.gov&lt;/a&gt;
&lt;a href=&#34;https://data.world/datasets/free&#34;&gt;Data.world&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stay tuned for more tutorials!&lt;br/&gt;
Thank You!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Tutorial: Web Scraping of Multiple Pages using R</title>
      <link>/2020/07/tutorial-web-scraping-of-multipe-pages-using-r/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/tutorial-web-scraping-of-multipe-pages-using-r/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In today’s world, data is being generated at an exponential rate. This massive amount of data and information is essential for many individuals and tech giants in various useful ways.&lt;/p&gt;
&lt;p&gt;So, having access to precise data in abundance will serve you just right in any field in gaining insights and performing further analysis. Therefore, Web Scraping has become a must have skill especially if you are a data scientist.&lt;/p&gt;
&lt;p&gt;All the data is available on the Internet today. But, how to scrape data that might be useful to you? Well, you have got it all sorted out. With all the advanced tools and programming languages, scraping data out from the web is just one cushy job.&lt;/p&gt;
&lt;p&gt;Let’s dive straight to the point.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;web-scraping&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Web Scraping?&lt;/h1&gt;
&lt;p&gt;Web Scraping is just a technique to convert unorganized data that is usually available on the internet to an organized format so that it can be useful to us.&lt;/p&gt;
&lt;p&gt;The very basic idea of scraping data is the old school method of COPY AND PASTE . Well, to be honest, this method might sound easy-peasy but is taxing, monotonous, time-dependent and not at all fascinating.&lt;/p&gt;
&lt;p&gt;But with a few lines of code it is utterly possible. So, let’s see how can we scrape data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;web-scraping-using-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Web Scraping using R&lt;/h1&gt;
&lt;p&gt;Expecting that you all will be having a basic knowledge about how R works and its syntax, lets get straight to this short &lt;strong&gt;tutorial&lt;/strong&gt; where I’ll show you &lt;em&gt;How To Scrape Data using R from multiple pages at once.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For general text data scraping: you can visit:&lt;/em&gt;
&lt;a href=&#34;https://github.com/shrish83/Web-Scraping-in-R&#34;&gt;Basic Web Scraping&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;about-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;About the Data&lt;/h3&gt;
&lt;p&gt;From &lt;a href=&#34;https://www.the-numbers.com/movie/budgets&#34;&gt;The Numbers&lt;/a&gt;, here lies the complete list of movies with their release dates, production budget and gross revenue information. The profit and loss figures are very rough estimates based on domestic and international box office earnings and domestic video sales, extrapolated to estimate worldwide income to the studio, after deducting retail costs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The movies’ data is in the tabular format.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;following-are-the-steps-you-need-to-follow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Following are the steps you need to follow:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open R Studio. Then in a new file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;package-installation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Package Installation&lt;/h3&gt;
&lt;p&gt;Install the required packages.&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;xml2: &lt;code&gt;Xml2&lt;/code&gt; is a wrapper around the comprehensive libxml2 C library that makes it easier to work with XML and HTML in R&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rvest: &lt;code&gt;rvest&lt;/code&gt; helps you scrape information from web. pages.&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tibble: The &lt;code&gt;tibble&lt;/code&gt; package provides utilities for handling tibbles, where “tibble” is a colloquial term for the S3 tbl_df class. The tbl_df class is a special case of the base &lt;code&gt;data.frame&lt;/code&gt;.&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(xml2)
library(rvest)   ##very important
library(tibble)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Storing the &lt;code&gt;url&lt;/code&gt; of the first page of the table with data of about 100 movies in &lt;code&gt;base_url&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_url &amp;lt;- &amp;quot;https://www.the-numbers.com/movie/budgets/all&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scraping &lt;em&gt;html&lt;/em&gt; content from the stored url:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_webpage &amp;lt;- read_html(base_url)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now, as you can see &lt;a href=&#34;https://www.the-numbers.com/movie/budgets/all/101&#34;&gt;here&lt;/a&gt;, after &lt;strong&gt;all/101&lt;/strong&gt; is present. Similarly, there are many more pages with 100 movies each in the table all with different urls. &lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;So, should we store 100 urls for 100 pages for 10,000 movies?&lt;/strong&gt;
Ofcourse not! We have certain string formatting styles. You can visit the documentation &lt;a href=&#34;https://www.gastonsanchez.com/r4strings/c-style-formatting.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hence, for strings, we use &lt;code&gt;%s&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_urls&amp;lt;- &amp;quot;https://www.the-numbers.com/movie/budgets/all/%s&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating dataframe of the first 100 movies:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;html_table()&lt;/code&gt;: converts html tables into dataframes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table_base &amp;lt;- rvest::html_table(base_webpage)[[1]] %&amp;gt;% 
  tibble::as_tibble(.name_repair = &amp;quot;unique&amp;quot;) # repair the repeated columns&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating dataframe of the next set of movies:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#creating two empty dataframes
table_new &amp;lt;-data.frame()
df &amp;lt;- data.frame()

#iterator
i&amp;lt;-101

#it loops through 5501 times so as to extract and then store and then combine about 5000 movies so far extracted.
while (i&amp;lt;5502) {
  new_webpage&amp;lt;- read_html(sprintf(new_urls,i))
  table_new &amp;lt;- rvest::html_table(new_webpage)[[1]] %&amp;gt;% 
    tibble::as_tibble(.name_repair = &amp;quot;unique&amp;quot;) # repair the repeated columns
  df&amp;lt;- rbind(df,table_new)
  i=i+100
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Merge the &lt;code&gt;table_base&lt;/code&gt; and &lt;code&gt;df&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_movies &amp;lt;- merge(table_base,df, all = T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let us see how are dataframe looks exactly:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(df_movies)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    ...1  ReleaseDate                              Movie ProductionBudget
## 1     1 Apr 23, 2019                  Avengers: Endgame     $400,000,000
## 2 1,000 Apr 28, 2000 The Flintstones in Viva Rock Vegas      $58,000,000
## 3 1,001  Apr 4, 2008                       Leatherheads      $58,000,000
## 4 1,002 Mar 22, 2017                               Life      $58,000,000
## 5 1,003 Dec 18, 2009    Did You Hear About the Morgans?      $58,000,000
## 6 1,004 Dec 12, 2008         Che, Part 1: The Argentine      $58,000,000
##   DomesticGross WorldwideGross
## 1  $858,373,000 $2,797,800,564
## 2   $35,231,365    $59,431,365
## 3   $31,373,938    $41,348,628
## 4   $30,234,022   $100,929,666
## 5   $29,580,087    $80,480,566
## 6    $1,802,521    $31,627,370&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Viola! We have accomplished our task.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now if you want, you can create a &lt;code&gt;csv&lt;/code&gt; file of this dataframe for physically storing it in your system using:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(df_movies,&amp;quot;moviesData_tutorial.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;See, here it is done. With a few lines of code, we were able to extract data from multiple pages using one single loop. This tutorial basically hints on using &lt;em&gt;string formatting style.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Stay tuned for more tutorials!&lt;br/&gt;
Thank You!&lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
  </channel>
</rss>